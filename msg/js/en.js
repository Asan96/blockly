// This file was automatically generated.  Do not modify.
'use strict';

goog.provide('Blockly.Msg.en');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Add Comment";
Blockly.Msg.AUTH = "Please authorize this app to enable your work to be saved and to allow it to be shared by you.";
Blockly.Msg.CHANGE_VALUE_TITLE = "Change value:";
Blockly.Msg.CHAT = "Chat with your collaborator by typing in this box!";
Blockly.Msg.CLEAN_UP = "Clean up Blocks";
Blockly.Msg.COLLAPSE_ALL = "Collapse Blocks";
Blockly.Msg.COLLAPSE_BLOCK = "Collapse Block";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "colour 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "colour 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "ratio";
Blockly.Msg.COLOUR_BLEND_TITLE = "blend";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Blends two colours together with a given ratio (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Choose a colour from the palette.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
Blockly.Msg.COLOUR_RANDOM_TITLE = "random colour";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Choose a colour at random.";
Blockly.Msg.COLOUR_RGB_BLUE = "blue";
Blockly.Msg.COLOUR_RGB_GREEN = "green";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "red";
Blockly.Msg.COLOUR_RGB_TITLE = "colour with";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "break out of loop";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "continue with next iteration of loop";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Break out of the containing loop.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Skip the rest of this loop, and continue with the next iteration.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Warning: This block may only be used within a loop.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each for each block";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST = "in list";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST_TAIL = "";
Blockly.Msg.CONTROLS_FOREACH_INPUT_ITEM = "for each item";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO = "from %1 to %2";
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO_BY = "from %1 to %2 by %3";
Blockly.Msg.CONTROLS_FOR_INPUT_WITH = "count with";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Have the variable %1 take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Add a condition to the if block.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Add a final, catch-all condition to the if block.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Add, remove, or reorder sections to reconfigure this if block.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "else";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "else if";
Blockly.Msg.CONTROLS_IF_MSG_IF = "if";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "If a value is true, then do some statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "do";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "repeat %1 times";
Blockly.Msg.CONTROLS_REPEAT_TITLE_REPEAT = "repeat";
Blockly.Msg.CONTROLS_REPEAT_TITLE_TIMES = "times";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Do some statements several times.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repeat until";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repeat while";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "While a value is false, then do some statements.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "While a value is true, then do some statements.";
Blockly.Msg.DELETE_BLOCK = "Delete Block";
Blockly.Msg.DELETE_X_BLOCKS = "Delete %1 Blocks";
Blockly.Msg.DISABLE_BLOCK = "Disable Block";
Blockly.Msg.DUPLICATE_BLOCK = "Duplicate";
Blockly.Msg.ENABLE_BLOCK = "Enable Block";
Blockly.Msg.EXPAND_ALL = "Expand Blocks";
Blockly.Msg.EXPAND_BLOCK = "Expand Block";
Blockly.Msg.EXTERNAL_INPUTS = "External Inputs";
Blockly.Msg.HELP = "Help";
Blockly.Msg.INLINE_INPUTS = "Inline Inputs";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "create empty list";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Returns a list, of length 0, containing no data records";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "list";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this list block.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "create list with";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Add an item to the list.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Create a list with any number of items.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "first";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# from end";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "get";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "get and remove";
Blockly.Msg.LISTS_GET_INDEX_LAST = "last";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "random";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "remove";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Returns the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Returns the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Returns the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Returns the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Removes and returns the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Removes and returns the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Removes and returns the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Removes and returns the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Removes and returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Removes the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Removes the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Removes the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Removes the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Removes a random item in a list.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "to # from end";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "to #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "to last";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "get sub-list from first";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "get sub-list from # from end";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "get sub-list from #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Creates a copy of the specified portion of a list.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "find first occurrence of item";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg.LISTS_INDEX_OF_LAST = "find last occurrence of item";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Returns the index of the first/last occurrence of the item in the list. Returns 0 if text is not found.";
Blockly.Msg.LISTS_INLIST = "in list";
Blockly.Msg.LISTS_IS_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg.LISTS_IS_EMPTY_TITLE = "%1 is empty";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg.LISTS_LENGTH_TITLE = "length of";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Returns the length of a list.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_REPEAT_TITLE = "create list with item %1 repeated %2 times";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Creates a list consisting of the given value repeated the specified number of times.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "as";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "insert at";
Blockly.Msg.LISTS_SET_INDEX_SET = "set";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserts the item at the start of a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Inserts the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Inserts the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Append the item to the end of a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserts the item randomly in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Sets the first item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Sets the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Sets the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Sets the last item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Sets a random item in a list.";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "make list from text";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "make text from list";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Join a list of texts into one text, separated by a delimiter.";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Split text into a list of texts, breaking at each delimiter.";
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "with delimiter";
Blockly.Msg.LISTS_TOOLTIP = "Returns true if the list is empty.";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "false";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Returns either true or false.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "true";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Return true if both inputs equal each other.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Return true if the first input is greater than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Return true if the first input is greater than or equal to the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Return true if the first input is smaller than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Return true if the first input is smaller than or equal to the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Return true if both inputs are not equal to each other.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg.LOGIC_NEGATE_TITLE = "not";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Returns true if the input is false. Returns false if the input is true.";
Blockly.Msg.LOGIC_NULL = "null";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Returns null.";
Blockly.Msg.LOGIC_OPERATION_AND = "and";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg.LOGIC_OPERATION_OR = "or";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Return true if both inputs are true.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Return true if at least one of the inputs is true.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "if false";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "if true";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Return the sum of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Return the quotient of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Return the difference of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Return the product of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Return the first number raised to the power of the second number.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_QUYU = "Returns the first number on the second number remainder.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_INPUT_BY = "by";
Blockly.Msg.MATH_CHANGE_TITLE_CHANGE = "change";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Add a number to variable '%1'.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "constrain %1 low %2 high %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Constrain a number to be between the specified limits (inclusive).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "is divisible by";
Blockly.Msg.MATH_IS_EVEN = "is even";
Blockly.Msg.MATH_IS_NEGATIVE = "is negative";
Blockly.Msg.MATH_IS_ODD = "is odd";
Blockly.Msg.MATH_IS_POSITIVE = "is positive";
Blockly.Msg.MATH_IS_PRIME = "is prime";
Blockly.Msg.MATH_IS_TOOLTIP = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
Blockly.Msg.MATH_IS_WHOLE = "is whole";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_TITLE = "remainder of %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Return the remainder from dividing the two numbers.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "A number.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "average of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "max of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "median of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "min of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "modes of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "random item of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standard deviation of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "sum of list";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Return the average (arithmetic mean) of the numeric values in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Return the largest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Return the median number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Return the smallest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Return a list of the most common item(s) in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Return a random element from the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Return the standard deviation of the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Return the sum of all the numbers in the list.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "random fraction";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "random integer from %1 to %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Return a random integer between the two specified limits, inclusive.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "round";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "round down";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "round up";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Round a number up or down.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absolute";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "square root";
Blockly.Msg.MATH_ABS='abs';
Blockly.Msg.MATH_SQ='sq';
Blockly.Msg.MATH_SQRT='sqrt';
Blockly.Msg.MATH_LOG='log';
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Return the absolute value of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Return e to the power of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Return the natural logarithm of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Return the base 10 logarithm of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Return the negation of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Return 10 to the power of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Return the square root of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_SQ = "Return the square of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_TOINT = "Returns the integer part a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROUND = "Returns the integer part a number using around.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_CEIL = "Returns the integer part a number using ceil.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_FLOOR = "Returns the integer part a number using floor.";

Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_QUYU_SYMBOL="%";
Blockly.Msg.MATH_TRIG_ACOS = "acos";
Blockly.Msg.MATH_TRIG_ASIN = "asin";
Blockly.Msg.MATH_TRIG_ATAN = "atan";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_TAN = "tan";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Return the arccosine of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Return the arcsine of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Return the arctangent of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Return the cosine of a degree (not radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Return the sine of a degree (not radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Return the tangent of a degree (not radian).";
Blockly.Msg.ME = "Me";
Blockly.Msg.NEW_VARIABLE = "New variable...";
Blockly.Msg.NEW_VARIABLE_TITLE = "New variable name:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "allow statements";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "with:";
Blockly.Msg.PROCEDURES_CALLNORETURN_CALL = "do";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Run the user-defined function ' 1'.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Run the user-defined function '%1' and use its output.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "with:";
Blockly.Msg.PROCEDURES_CREATE_DO = "Create '%1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "do";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "procedure";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Creates a function with no output.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "return";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Creates a function with an output.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Warning: This function has duplicate parameters.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Highlight function definition";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "If a value is true, then return a second value.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Warning: This block may be used only within a function definition.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "input:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Add an input to the function.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "inputs";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Add, remove, or reorder inputs to this function.";
Blockly.Msg.REMOVE_COMMENT = "Remove Comment";
Blockly.Msg.RENAME_VARIABLE = "Rename variable...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Rename all '%1' variables to:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "append text";
Blockly.Msg.TEXT_WRITE_TEXT = "Write Text";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_APPEND_TO = "to";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Append some text to variable '%1'.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "to lower case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "to Title Case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "to UPPER CASE";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";
Blockly.Msg.TEXT_CHARAT_FIRST = "get first letter";
Blockly.Msg.TEXT_CHARAT_FROM_END = "get letter # from end";
Blockly.Msg.TEXT_CHARAT_FROM_START = "get letter #";
Blockly.Msg.TEXT_CHARAT = "char at";
Blockly.Msg.TEXT_CHARAT2 = "";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_CHARAT_LAST = "get last letter";
Blockly.Msg.TEXT_CHARAT_RANDOM = "get random letter";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Returns the letter at the specified position.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Add an item to the text.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "join";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Add, remove, or reorder sections to reconfigure this text block.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "to letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "to letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "to last letter";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "in text";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "get substring from first letter";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "get substring from letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "get substring from letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Returns a specified portion of the text.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "find first occurrence of text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "find last occurrence of text";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Returns the index of the first/last occurrence of first text in the second text. Returns 0 if text is not found.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 is empty";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Returns true if the provided text is empty.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "create text with";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Create a piece of text by joining together any number of items.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "length of %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Returns the number of letters (including spaces) in the provided text.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg.TEXT_PRINT_TITLE = "print %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Write the specified text, number or other value.";
Blockly.Msg.TEXT_PRINT_HEX_TOOLTIP = "Print the specified text, number or other value.";
Blockly.Msg.TEXT_WRITE_TOOLTIP = "Print the specified number in hexadecimal format.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Prompt for user for a number.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Prompt for user for some text.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "prompt for number with message";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "prompt for text with message";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "A letter, word, or line of text.";
Blockly.Msg.TEXT_CHAR_TOOLTIP = "A character.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "trim spaces from both sides of";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "trim spaces from left side of";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "trim spaces from right side of";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Return a copy of the text with spaces removed from one or both ends.";
Blockly.Msg.TODAY = "Today";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "item";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Create 'set %1'";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";
Blockly.Msg.VARIABLES_GET_TAIL = "";
Blockly.Msg.VARIABLES_GET_TITLE = "";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Returns the value of this variable.";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Create 'get %1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg.VARIABLES_SET_TAIL = "to";
Blockly.Msg.VARIABLES_SET_TITLE = "set";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Sets this variable to be equal to the input.";
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.VARIABLES_SET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.VARIABLES_GET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_CALLRETURN_CALL = Blockly.Msg.PROCEDURES_CALLNORETURN_CALL;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
//luokailiang
Blockly.MIXLY_PINMODE = 'pinMode';
Blockly.MIXLY_PINMODEIN = 'INPUT';
Blockly.MIXLY_PINMODEOUT = 'OUTPUT';
Blockly.MIXLY_PINMODEPULLUP = 'INPUT_PULLUP';
Blockly.MIXLY_DECLARE='Declare';
Blockly.MIXLY_AS='as';
Blockly.MIXLY_VALUE='value';
Blockly.MIXLY_VALUE2='value';
Blockly.MIXLY_MAP='Map ';
Blockly.MIXLY_MAP_FROM="from [";
Blockly.MIXLY_MAP_TO="] to [";
Blockly.MIXLY_MILLIS='millis';
Blockly.MIXLY_DELAY='Delay';
Blockly.MIXLY_ATTACHINTERRUPT_PIN='attachInterrupt pin#';
Blockly.MIXLY_DETACHINTERRUPT_PIN = 'detachInterrupt pin#';
Blockly.MIXLY_ATTACHPININTERRUPT_PIN = 'attachPinInterrupt pin#';
Blockly.MIXLY_DETACHPININTERRUPT_PIN = 'detachPinInterrupt pin#';
Blockly.MIXLY_MODE='mode';
Blockly.MIXLY_DO='do';
Blockly.MIXLY_BUILDIN_LED='Build-in LED ';
Blockly.MIXLY_STAT='Stat';
Blockly.MIXLY_DIGITALWRITE_PIN='DigitalWrite PIN#';
Blockly.MIXLY_DIGITALREAD_PIN='DigitalRead PIN#';
Blockly.MIXLY_ANALOGWRITE_PIN='AnalogWrite PIN#';
Blockly.MIXLY_ANALOGREAD_PIN='AnalogRead PIN#';
Blockly.MIXLY_SERIAL_WRITE = 'write';
Blockly.MIXLY_SERIAL_PRINT = 'print';
Blockly.MIXLY_SERIAL_PRINTLN='println';
Blockly.MIXLY_SERIAL_PRINT_HEX='println(hex)';
Blockly.MIXLY_SERIAL_FLUSH='flush';
Blockly.MIXLY_STEP='step';
Blockly.MIXLY_TONE_PIN='Tone PIN#';
Blockly.MIXLY_TONE_NOTIMER_PIN='Tone (NO Timer)PIN#';
Blockly.MIXLY_FREQUENCY='frequency';
Blockly.MIXLY_CHANNEL='channel';
Blockly.MIXLY_DURATION='duration';
Blockly.MIXLY_NOTONE_PIN='noTone PIN#';
Blockly.MIXLY_NOTONE_NOTIMER_PIN='noTone(NO Timer) PIN#';
Blockly.MIXLY_BLOCKGROUP_CATEGORY='BlockGroup';
Blockly.MIXLY_IR_RECEIVE='IRreceive PIN#';
Blockly.MIXLY_IR_RECEIVE_ENABLE='enableIRIn PIN#';
Blockly.MIXLY_IR_SEND_NEC1='IRsend'
Blockly.MIXLY_IR_SEND_NEC2=' PIN#'
Blockly.MIXLY_IR_RECEIVE_RAW='IRreceive(Print RAW Data) PIN#';
Blockly.MIXLY_IR_SEND_RAW='IRsend(RAW) PIN#'
Blockly.LANG_MATH_TO_INT = 'toInt';
Blockly.LANG_MATH_TO_ROUND = 'Round';
Blockly.LANG_MATH_TO_CEIL = 'Ceil';
Blockly.LANG_MATH_TO_FLOOR = 'Floor';
Blockly.MIXLY_SERVO='Servo';
Blockly.MIXLY_PIN='PIN#';
Blockly.MIXLY_DEGREE_0_180='Degree (0~180)';
Blockly.MIXLY_READ_DEGREES='Read Degrees';
Blockly.MIXLY_HIGH='HIGH';
Blockly.MIXLY_LOW='LOW';
//ztx add
//Blockly.TEST_BIG='BIG';
//Blockly.TEST_SMALL='SMALL';
//ztx end
Blockly.MIXLY_ON='ON';
Blockly.MIXLY_OFF='OFF';
Blockly.MIXLY_RISING='RISING';
Blockly.MIXLY_FALLING='FALLING';
Blockly.MIXLY_CHANGE='CHANGE';
Blockly.MIXLY_I2C_MASTER_WRITE="I2C_Write device";
Blockly.MIXLY_I2C_MASTER_READ="I2C_Read device";
Blockly.MIXLY_I2C_MASTER_READ2="I2C_Read";
Blockly.MIXLY_I2C_VALUE="value"
Blockly.MIXLY_I2C_BYTES="bytes";
Blockly.MIXLY_I2C_AVAILABLE='I2C isAvailable?';
Blockly.MIXLY_I2C_SLAVE_ONRECEIVE='I2C Slave onReceive PIN#';
Blockly.LANG_CONTROLS_FOR_INPUT_WITH = 'count with';
Blockly.LANG_CONTROLS_FOR_INPUT_VAR = 'x';
Blockly.LANG_CONTROLS_FOR_INPUT_FROM = 'from';
Blockly.LANG_CONTROLS_FOR_INPUT_TO = 'to';
Blockly.LANG_CONTROLS_FOR_INPUT_DO = 'do';
Blockly.LANG_CONTROLS_WHILEUNTIL_TITLE_REPEAT = 'repeat';
Blockly.LANG_CONTROLS_WHILEUNTIL_INPUT_DO = 'do';
Blockly.LANG_CONTROLS_WHILEUNTIL_OPERATOR_WHILE = 'while';
Blockly.LANG_CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = 'until';
Blockly.LANG_CONTROLS_FLOW_STATEMENTS_INPUT_OFLOOP = 'of loop';
Blockly.LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = 'break out';
Blockly.LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = 'continue with next iteration';
Blockly.LANG_CONTROLS_FLOW_STATEMENTS_WARNING = 'Warning:\n' +
'This block may only\n' +
'be used within a loop.';
Blockly.LANG_MATH_LONG = 'long';
Blockly.LANG_MATH_INT = 'int';
Blockly.LANG_MATH_FLOAT = 'float';
Blockly.LANG_MATH_BOOLEAN = 'boolean';
Blockly.LANG_MATH_BYTE = 'byte';
Blockly.LANG_MATH_CHAR = 'char';
Blockly.LANG_MATH_STRING = 'string';
/*
 *add all data types supported in Arduino except void(only use in function) and array(in special catelogy)
 @author zyc
 @date 2018-12-29
 */
 Blockly.LANG_MATH_UNSIGNED_INT = 'unsigned int';
 Blockly.LANG_MATH_WORD = 'word';
 Blockly.LANG_MATH_UNSIGNED_LONG = 'unsigned long';
 Blockly.LANG_MATH_UNSIGNED_CHAR = 'unsigned char';
 Blockly.LANG_MATH_DOUBLE = 'double';
//end
Blockly.LANG_LISTS_GET_INDEX1 = 'get item at';
Blockly.LANG_LISTS_GET_INDEX2 = '';
Blockly.LANG_LISTS_GET_INDEX_TOOLTIP = 'Returns the value at the specified position in a list.';
Blockly.LANG_LISTS_SET_INDEX1 = 'set item at';
Blockly.LANG_LISTS_SET_INDEX2 = 'to';
Blockly.LANG_LISTS_SET_INDEX_TOOLTIP = 'Sets the value at the specified position in a list.';
Blockly.LANG_MATH_CONSTRAIN_INPUT_CONSTRAIN = 'Constrain';
Blockly.LANG_MATH_CONSTRAIN_INPUT_LOW = 'between (low)';
Blockly.LANG_MATH_CONSTRAIN_INPUT_HIGH = 'and (high)';
Blockly.LANG_MATH_RANDOM_SEED = 'random seed';
Blockly.LANG_MATH_RANDOM_INT_INPUT_FROM = 'random integer from';
Blockly.LANG_MATH_RANDOM_INT_INPUT_TO = 'to';
Blockly.MIXLY_DF_LED='LED';
Blockly.MIXLY_DF_BUZZER='Buzzer';
Blockly.MIXLY_DF_BTN='Button';
Blockly.MIXLY_DF_VIBRATION='Vibration';
Blockly.MIXLY_DF_TILT='Tilt';
Blockly.MIXLY_DF_TOUCH='Touch';
Blockly.MIXLY_DF_MAGNETIC='Magnetic';
Blockly.MIXLY_DF_PYROELECTRIC_INFRARED='Pyroelectric infrared';
Blockly.MIXLY_MB_PYROELECTRIC_INFRARED='PIR Motion';
Blockly.MIXLY_DF_JOYSTICK_D='Joystick button';
Blockly.MIXLY_DF_JOYSTICK_A='Joystick';
Blockly.MIXLY_JOYSTICK='Joystick';
Blockly.MIXLY_DF_POTENTIOMETER='Potentiometer';
Blockly.MIXLY_POTENTIOMETER='Potentiometer';
Blockly.MIXLY_DF_ROTATION='Rotation';
Blockly.MIXLY_DF_VOLTAGE='Voltage';
Blockly.MIXLY_DF_PIEZO_DISK_VIRBRATION='Piezo disk virbration';
Blockly.MIXLY_DF_SOUND='Sound';
Blockly.MIXLY_SOUND='Sound';
Blockly.MIXLY_DF_RELAY='Relay';
Blockly.MIXLY_DF_LIGHT='Light';
Blockly.MIXLY_DF_GRAYSCALE='Grayscale';
Blockly.MIXLY_DF_FLAME='Flame';
Blockly.MIXLY_DF_TEMPERATURE='Temperature';
Blockly.MIXLY_TEMPERATURE='Temperature(℃)';
Blockly.MIXLY_DF_ACCELEROMETER='Accelerometer';
Blockly.MIXLY_DF_MOISTURE='Moisture';
Blockly.MIXLY_DF_WATER='Water';
Blockly.MIXLY_DF_CO='Carbon monoxide';
Blockly.MIXLY_DF_SHARP_GP2Y0A21='Sharp GP2Y0A21';
Blockly.MIXLY_MAKELISTFROM='make list from text';
Blockly.MIXLY_SPLITBYDOU='';
Blockly.MIXLY_SETUP='setup';
Blockly.MIXLY_WARNING_INTERRUPT='This pin cannot be interrupted!';
Blockly.MIXLY_CHAOSHENGBO='Ultrasonic ranging(cm) ';
Blockly.MIXLY_WEIGHTSENSOR='Weight Module';
Blockly.MIXLY_MB_CHAOSHENGBO='Ultrasonic ranging';
Blockly.MIXLY_IR_RECEIVE_YES='Received';
Blockly.MIXLY_IR_RECEIVE_NO='NotReceived';
Blockly.LANG_VARIABLES_SET_TITLE='';
Blockly.MIXLY_TEXT_JOIN='join';
Blockly.MIXLY_SERIAL_AVAILABLE = 'isAvailable?';
Blockly.MIXLY_SERIAL_EVENT = 'serialEvent';
Blockly.MIXLY_SERIAL_READSTR='readString';
Blockly.MIXLY_SERIAL_READSTR_UNTIL='readStringUntil';
Blockly.MIXLY_SERIAL_READ='';
Blockly.MIXLY_IR_RECIEVE_TOOLTIP='Do something when receiving infrared signals.';
Blockly.MIXLY_IR_SEND_NEC_TOOLTIP='Sends Infrared signals of the specified type';
Blockly.MIXLY_IR_RECIEVE_RAW_TOOLTIP='Print the Infrared signal in RAW type when receiving it.';
Blockly.MIXLY_IR_SEND_RAW_TOOLTIP='Sends RAW Infrared signals (set pin number, list, length of list and IR frequency)';
Blockly.MIXLY_LIST_NAME='list';
Blockly.MIXLY_LIST_LENGTH='listLength';
Blockly.MIXLY_TO_INT='toInt';
Blockly.MIXLY_TO_FLOAT='toFloat';
Blockly.MIXLY_DATA="data";
Blockly.MIXLY_BITS="bits";
Blockly.MIXLY_MB_LIGHT_GRAYSCALE='Light and Grayscale Sensor';
Blockly.MIXLY_MB_LIGHT_GRAYSCALE_LED=' LED set';
Blockly.MIXLY_MB_LIGHT_MOTOR='Set Motor';
Blockly.MIXLY_MB_LIGHT_MOTOR_SPEED=' Speed(-255~255)';
Blockly.MIXLY_DELAY_MS='ms';
Blockly.MIXLY_DELAY_US = 'μs';
Blockly.MIXLY_PIN = 'PIN#';
Blockly.MIXLY_GETTEMPERATUE = 'getTemperature';
Blockly.MIXLY_GETHUMIDITY = 'getHumidity';
Blockly.MIXLY_DHT11='DHT11 PIN#';
Blockly.MIXLY_DHT11_T='getTemperature';
Blockly.MIXLY_DHT11_H='getHumidity';
Blockly.MIXLY_LCD_RGB_BACKLIGHT='LCD RGB Backlight';
Blockly.MIXLY_DF_LCD='LCD';
Blockly.MIXLY_LCD_PRINT1='print line1';
Blockly.MIXLY_LCD_PRINT2='print line2';
Blockly.MIXLY_LCD_PRINT3='print line3';
Blockly.MIXLY_LCD_PRINT4='print line4';
Blockly.MIXLY_LCD_ROW='row';
Blockly.MIXLY_LCD_COLUMN='column';
Blockly.MIXLY_LCD_PRINT='print';
Blockly.MIXLY_LCD_SETCOLOR='setColor';
Blockly.MIXLY_LCD_STAT_ON='On';
Blockly.MIXLY_LCD_STAT_OFF='Off';
Blockly.MIXLY_LCD_STAT_CURSOR='Cursor';
Blockly.MIXLY_LCD_STAT_NOCURSOR='noCursor';
Blockly.MIXLY_LCD_STAT_BLINK='Blink';
Blockly.MIXLY_LCD_STAT_NOBLINK='noBlink';
Blockly.MIXLY_LCD_STAT_CLEAR='Clear';
Blockly.MIXLY_LCD_NOBACKLIGHT = 'NoBackLight';
Blockly.MIXLY_LCD_BACKLIGHT = 'BackLight';
Blockly.MIXLY_7S_DISPLAY='7 Segment Display';
Blockly.MIXLY_NUMBER='number';
Blockly.MIXLY_BLUETOOTH='Bluetooth';
Blockly.MIXLY_BLUETOOTH_READ_STR='readString';
Blockly.MIXLY_AVAILABLE='available?';
Blockly.MIXLY_DATAPIN='dataPin#';
Blockly.MIXLY_CLOCKPIN='clockPin#';
Blockly.MIXLY_BITORDER='bitOrder';
Blockly.MIXLY_MSBFIRST='MSBFIRST';
Blockly.MIXLY_LSBFIRST='LSBFIRST';
Blockly.MIXLY_TOSTRING = 'toString';
Blockly.MIXLY_TOCHAR = 'toChar';
Blockly.MIXLY_TOASCII = 'toAscii';
Blockly.MIXLY_ROMEO_MOTOR='Romeo motor';
Blockly.MIXLY_ROMEO_MOTOR_SPEED='speed';
Blockly.MIXLY_STOP='stop';
Blockly.MIXLY_PULSEIN='pulseIn(μs) PIN#';
Blockly.MIXLY_PULSEIN_STAT='state';
Blockly.MIXLY_PULSEIN_TIMEOUT='timeout(μs)';
Blockly.MIXLY_SERIAL_READ_INT='parseInt';
Blockly.MIXLY_SERIAL_READ_FLOAT='parseFloat';
Blockly.MIXLY_MAX='max';
Blockly.MIXLY_MIN='min';
Blockly.MIXLY_WRITE_SD_FILE='Write SD File';
Blockly.MIXLY_SD_DATA='Data';
Blockly.MIXLY_SD_NEWLINE='NewLine';
Blockly.MIXLY_EEPROM_WRITE_LONG='Write(long) EEPROM address';
Blockly.MIXLY_EEPROM_READ_LONG='Read(long) EEPROM address';
Blockly.MIXLY_EEPROM_WRITE_BYTE='Write(byte) EEPROM address';
Blockly.MIXLY_EEPROM_READ_BYTE='Read(byte) EEPROM address';
Blockly.MIXLY_SENSE_MOTOR='Set Motor Speed(-255~255)';
Blockly.MIXLY_SENSE_MOTOR_STOP='Stop Motor';
Blockly.MIXLY_SENSE_SERVO='Set Servo Angle';
Blockly.MIXLY_SENSE_RGBLED='Set RGB LED\'s Color ';
Blockly.MIXLY_TRAFFIC_LED='Set Traffic LED';
Blockly.MIXLY_EAST='EAST';
Blockly.MIXLY_SOUTH='SOUTH';
Blockly.MIXLY_WEST='WEST';
Blockly.MIXLY_NORTH='NORTH';
Blockly.MIXLY_SENSE_BUZZER='Set Buzzer';
Blockly.MIXLY_SENSE_ULTRASONIC='Ultrasonic Value';
Blockly.MIXLY_SENSE_PYROELECTRIC_INFRARED='PIR Motion?';
Blockly.MIXLY_BUTTON='Button';
Blockly.MIXLY_UP='UP';
Blockly.MIXLY_DOWN='DOWN';
Blockly.MIXLY_LEFT='LEFT';
Blockly.MIXLY_RIGHT='RIGHT';
Blockly.MIXLY_MID='MID';
Blockly.MIXLY_IS_PRESSED='is pressed?';
Blockly.MIXLY_SENSE_SLIDING='Sliding Potentiometer Value';
Blockly.MIXLY_SENSE_TEMPERATURE='Temperature Value';
Blockly.MIXLY_SENSE_HUMIDITY='Humidity Value';
Blockly.MIXLY_SENSE_SOUND='Sound Value';
Blockly.MIXLY_SENSE_LIGHT='Light Value';
Blockly.MIXLY_SENSE_WEIGHT='Weight Value';
Blockly.MIXLY_SENSE_IR='IR Received:';
Blockly.MIXLY_SENSE_DIGITAL_DISPLAY='Set LED Digital Display(0~99)';
Blockly.MIXLY_SENSE_DIGITAL_DISPLAY_CLOSE='Close LED Digital Display';
Blockly.MIXLY_SENSE_LED_MATRIX='Set LED Matrix(0~9)';
Blockly.MIXLY_SENSE_LED_MATRIX_CLOSE='Close LED Matrix';
Blockly.LANG_INOUT_DIGITAL_WRITE_TOOLTIP='Write digital value to a specific Port';
Blockly.MIXLY_FORWARD='run forward';
Blockly.MIXLY_BACKWARD='run backward';
Blockly.MIXLY_TURNLEFT='turn left';
Blockly.MIXLY_TURNRIGHT='turn right';
Blockly.MIXLY_MBOT_SPEED='at speed(-255~255)';
Blockly.MIXLY_RUNTIME='System running time';
Blockly.MIXLY_LED_ON_BOARD='led on board';
Blockly.MIXLY_ALL='all';
Blockly.MIXLY_SET_LED='Set LED';
Blockly.MIXLY_MBOT_TONE='Play tone';
Blockly.MIXLY_MBOT_NOTONE='Stop tone';
Blockly.MIXLY_SHOW_FACE='Show face';
Blockly.MIXLY_SHOW_FACE_TEXT='characters:';
Blockly.MIXLY_SHOW_FACE_TIME='time';
Blockly.MIXLY_MBOT_SET_DISPLAY='Set 7-segments display';
Blockly.MIXLY_MBOT_SET_LIGHT='Set light sensor';
Blockly.MIXLY_MBOT_SET_LIGHT_LED='led as';
Blockly.MIXLY_MBOT_SET_CAMERA='Set camera shutter';
Blockly.MIXLY_MBOT_SET_CAMERA_STAT='as';
Blockly.MIXLY_MBOT_SET_CAMERA_PRESS='Press';
Blockly.MIXLY_MBOT_SET_CAMERA_RELEASE='Release';
Blockly.MIXLY_MBOT_SET_CAMERA_FOCUS_ON='Focus On';
Blockly.MIXLY_MBOT_SET_CAMERA_FOCUS_OFF='Focus Off';
Blockly.MIXLY_MBOT_LIGHT_SENSOR='Light sensor';
Blockly.MIXLY_LIGHT_SENSOR_ON_BOARD='light sensor on board';
Blockly.MIXLY_MBOT_BUTTON='Button';
Blockly.MIXLY_MBOT_BUTTON_PRESSED='pressed';
Blockly.MIXLY_MBOT_BUTTON_RELEASED='released';
Blockly.MIXLY_MBOT_LINE_FOLLOWER='Line follower';
Blockly.MIXLY_MBOT_JOYSTICK='Joystick';
Blockly.MIXLY_MBOT_JOYSTICK_X='X-Axis';
Blockly.MIXLY_MBOT_JOYSTICK_Y='Y-Axis';
Blockly.MIXLY_MBOT_POTENTIOMETER='Potentiometer';
Blockly.MIXLY_MBOT_SOUND_SENSOR='Sound sensor';
Blockly.MIXLY_MBOT_LIMIT_SWITCH='Limit switch';
Blockly.MIXLY_MBOT_TEMPERATURE='Temperature';
Blockly.MIXLY_MBOT_PIR_MOTION_SENSOR='Pir motion sensor';
Blockly.MIXLY_MBOT_IR_REMOTE='Ir remote';
Blockly.MIXLY_MBOT_IR_REMOTE_PRESSED='pressed';
Blockly.MIXLY_SETTING='setting';
Blockly.MIXLY_SEND_MBOT_MESSAGE='Send mBot\'s message';
Blockly.MIXLY_MBOT_MESSAGE_RECEIVED='mBot\'s message received';
Blockly.MIXLY_LABPLUS_ROBOT_MOVEMENT='Robot movement';
Blockly.MIXLY_LABPLUS_ROBOT_MOVEMENT_GO_FORWARD='go forward;'
Blockly.MIXLY_LABPLUS_ROBOT_MOVEMENT_STOP='stop';
Blockly.MIXLY_LABPLUS_ROBOT_MOVEMENT_GO_BACK='go back';
Blockly.MIXLY_LABPLUS_ROBOT='Robot';
Blockly.MIXLY_LABPLUS_ROBOT_TURN_LEFT='turn left';
Blockly.MIXLY_LABPLUS_ROBOT_TURN_RIGHT='turn right';
Blockly.MIXLY_LABPLUS_ROBOT_DISPLAY='Set led matrix to';
Blockly.MIXLY_LABPLUS_ROBOT_DISPLAY_SMILE='smile';
Blockly.MIXLY_LABPLUS_ROBOT_DISPLAY_NOSMILE='sad';
Blockly.MIXLY_LABPLUS_ROBOT_DISPLAY_CLOSE_EYE='close eyes';
Blockly.MIXLY_LABPLUS_ROBOT_DISPLAY_LEFT='left arrow';
Blockly.MIXLY_LABPLUS_ROBOT_DISPLAY_RIGHT='right arrow';
Blockly.MIXLY_LABPLUS_ROBOT_DISPLAY_TIAOWEN='stripe';
Blockly.MIXLY_LABPLUS_ROBOT_DISPLAY_ZEBRA='zebra';
Blockly.MIXLY_LABPLUS_ROBOT_DISPLAY_NOTHING='nothing';
Blockly.MIXLY_LABPLUS_ROBOT_LED_TOP='Set led on top to';
Blockly.MIXLY_LABPLUS_ROBOT_LED_SIDE='Set side leds\' color to';
Blockly.MIXLY_LCD_ADDRESS="address";
var MSG = {
	//catMaker: "Maker",
	catInOut: "In/Out",
	catControl: "Control",
	catMath: "Math",
	catText: "Text",
	catLists: "Lists",
	catMicropyLists: "Lists",
	catDicts: "Dictory",
	catLogic: "Logic",
	catSerialPort:"SerialPort",
	catGroup: "Communicate",
	catStorage:"Storage",
	catSensor: "Sensor",
	catActuator: "Actuator",
	catMonitor:"Monitor",
	catLCD:"LCD 1602",
	cat4Digitdisplay:"Digit Display",
	catWS2812:"WS2812",
	catOLED:"OLED Screen",
	catHT16K33:"HT16K33",
	catMax7219:"MAX7219",
	catVar: "Variables",
	catFun: "Functions",
	catEthernet:"Ethernet",
	catNetwork:"Network",
	catEthernet_init:"Init",
	catEthernet_clinet:"Client",
	catSense: "Labplus(Box)",
	catSense2: "Labplus(Robot)",
	catLuxe:"LuxeRobot",
	tab_blocks: "Blocks",
	tab_arduino: "Code",
	copyright:"Copyright © Shandong Zhongke Siping Co., Ltd.				 http://www.3000lab.com/",
	viewNormal:"Normal",
	viewAdvanced:"Advanced",
	catGame:"Game",
	catSystem:"System",
	catTurtle:"Turtle",
	catTuple:"Tuple",
	catIot:"IOT",
	catSet:"Set",
	catData:"Data",
	catHardware:"Hardware"
};
Blockly.MIXLY_TOOLTIP_INOUT_HIGHLOW='Returns high or low voltage.';
Blockly.MIXLY_TOOLTIP_INOUT_DIGITAL_READ='Returns digital value of a specific Port';
Blockly.MIXLY_TOOLTIP_INOUT_ANALOG_WRITE='Writes analog value between 0 and 255 to a specific Port';
Blockly.MIXLY_TOOLTIP_INOUT_ANALOG_READ='Returns value between 0 and 1023 of a specific Port';
Blockly.MIXLY_TOOLTIP_INOUT_ATTACHINTERRUPT='Attachs interrupt to a specific Port';
Blockly.MIXLY_TOOLTIP_INOUT_DETACHINTERRUPT='Detachs interrupt to a specific Port';
Blockly.MIXLY_TOOLTIP_CONTROL_SETUP='Initialization(run only once)';
Blockly.MIXLY_TOOLTIP_CONTROL_DELAY='Delays specific time';
Blockly.MIXLY_TOOLTIP_CONTROL_MILLIS='Returns the system running time';
Blockly.MIXLY_TOOLTIP_VARIABLES_DECLARE='Declare and initialize a variable';
Blockly.MIXLY_TOOLTIP_MATH_MAX='Returns the larger number';
Blockly.MIXLY_TOOLTIP_MATH_MIN='Returns the smaller number';
Blockly.MIXLY_TOOLTIP_MATH_MAP='Maps a number from the first interval to the second interval.';
Blockly.MIXLY_TOOLTIP_TEXT_JOIN='Creates a piece of text by joining together two piece of text.';
Blockly.MIXLY_TOOLTIP_TEXT_TOTEXT = 'Converts a number into a string.';
Blockly.MIXLY_TOOLTIP_TEXT_TOCHAR = 'Returns the char corresponding to an ASCII code.';
Blockly.MIXLY_TOOLTIP_TEXT_TOASCII = 'Returns the ASCII code corresponding to a char.';
Blockly.MIXLY_TOOLTIP_TEXT_TOINT='Converts a string into an integer.';
Blockly.MIXLY_TOOLTIP_TEXT_TOFLOAT='Converts a string into an float.';
Blockly.MIXLY_TOOLTIP_LISTS_CREATE_WITH_TEXT = "Creates a list from a text.";
Blockly.MIXLY_TOOLTIP_LOGIT_TRUEORFALSE='If the first parameter is true, the second parameter is returned, otherwise return the third parameter.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_SERIAL_AVAILABLE='If the serial port is available, it returns true, otherwise returns false.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_SERIAL_READ_STR='Returns a string in serial port.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_SERIAL_READ_INT='Returns a integer in serial port.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_SERIAL_READ_FLOAT='Returns a float in serial port.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_CHAOSHENGBO='Returns the distance of ultrasonic sensor measured.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_GET_TEM='Returns the temperature of dht11 sensor measured.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_GET_HUM = 'Returns the humidity of dht11 sensor measured.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_SERVO_MOVE = 'Moves between 0~180 degree.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_SERVO_READ = 'Returns that degree with the last servo move.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_TONE = 'Play sound at the specified frequency.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_TONE2 = 'Play sound according to the specified frequency and duration.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_NOTONE = 'Stop playing sound.';
/*
 *add tooltips missed in Arduino before
 *@author:zyc
 *@date:2018-12-4
 */
 Blockly.MIXLY_TOOLTIP_INOUT_pinMode = 'Change pin mode';
 Blockly.MIXLY_TOOLTIP_INOUT_pulseIn = 'Get the period of the last pulse of a pin (microseconds)';
 Blockly.MIXLY_TOOLTIP_INOUT_pulseIn2 = 'Get the period of the last pulse of a pin (microseconds, timeout parameter can be set)';
 Blockly.MIXLY_TOOLTIP_INOUT_shiftout = 'Output data on pins like serial, which is equivalent to synchronous serial communication in general sense.';
 Blockly.MIXLY_TOOLTIP_CONTROL_MSTIMER2 = 'Interruption of Arduino internal timer';
 Blockly.MIXLY_TOOLTIP_CONTROL_MSTIMER2_START = 'MsTimer2 start';
 Blockly.MIXLY_TOOLTIP_CONTROL_MSTIMER2_STOP = 'MsTimer2 stop';
 Blockly.MIXLY_TOOLTIP_CONTROL_END_PROGRAM = 'Halt this program';
 Blockly.MIXLY_TOOLTIP_CONTROL_ALLOW_INTERRUPT = 'Enable interruption';
 Blockly.MIXLY_TOOLTIP_CONTROL_FORBID_INTERRUPT = 'Disable interruption';
 Blockly.MIXLY_TOOLTIP_SCOOP = 'Arduino Multithreading';
 Blockly.MIXLY_TOOLTIP_SCOOP_YIELD = 'Start executing multithreaded tasks';
 Blockly.MIXLY_TOOLTIP_SCOOP_SLEEP = 'Delay specified time (for multithreading only)';
 Blockly.MIXLY_TOOLTIP_MATH_RANDOM_SEED = 'Set random number seeds';
 Blockly.MIXLY_TOOLTIP_TEXT_LENGTH = 'Get string length';
 Blockly.MIXLY_TOOLTIP_TEXT_FIND_CHAR_AT = 'find substring %1 at string';
 Blockly.MIXLY_TOOLTIP_TEXT_EQUALS_STARTS_ENDS = 'Returns whether the string %1 %2';
 Blockly.MIXLY_TOOLTIP_SERIAL_BEGIN = 'Initialize Serial Port and Set Serial Port Communication Baud Rate';
 Blockly.MIXLY_TOOLTIP_SERIAL_READSTRUNITL = 'Read the string from the serial port until encounter %1';
 Blockly.MIXLY_TOOLTIP_SERIAL_FLUSH = 'Clear data in serial buffer';
 Blockly.MIXLY_TOOLTIP_SOFTSERIAL = 'Simulate digital pins #%1 and #%2 into serial communication pins';
 Blockly.MIXLY_TOOLTIP_SERIALEVENT = 'Execute certain commands by interruption when receiving information at serial ports';
 Blockly.MIXLY_TOOLTIP_IR_ENABLE = '';
 Blockly.MIXLY_TOOLTIP_I2C_MASTER_WRITE = 'I2C main device sends data. The parameters are the address of the main device and the value to be sent.';
 Blockly.MIXLY_TOOLTIP_I2C_MASTER_READ = 'I2C main device reads data. The parameters are the address of the main device and the byte length of the content to be read.';
 Blockly.MIXLY_TOOLTIP_I2C_MASTER_READ2 = 'Return data read from I2C main device';
 Blockly.MIXLY_TOOLTIP_I2C_AVAILABLE = 'Returns whether I2C device data was successfully read';
 Blockly.MIXLY_TOOLTIP_I2C_SLAVE_ONRECEIVE = 'I2C slave device receives clock and data signals generated by host device and performs some operations.';
 Blockly.MIXLY_TOOLTIP_SPI_TRANSFER = 'Transfer data to slave device through pin#%1 in SPI as main equipment';
 Blockly.MIXLY_TOOLTIP_RFID_INIT = 'Initialize the RFID reader with parameters of data line pin number, clock line pin number, main output slave output line pin number and main input slave output pin number.';
 Blockly.MIXLY_TOOLTIP_RFID_ON = 'Execute some commands when RFID can read data';
 Blockly.MIXLY_TOOLTIP_RFID_READ = 'Return card number read by RFID';
 Blockly.MIXLY_TOOLTIP_RFID_IN = 'Execute some commands when RFID reads specific data';
 Blockly.MIXLY_TOOLTIP_RFID_WRITEBLOCK = 'Write data to the specific data block of the e-tag';
 Blockly.MIXLY_TOOLTIP_RFID_READBLOCK = 'Make the RFID device no longer read data';
 Blockly.MIXLY_TOOLTIP_STORE_SDWRITE = 'Write files to SD card';
 Blockly.MIXLY_TOOLTIP_STORE_EEPROM_WRITELONG = 'Write Long Integer Data to EEPROM specific address';
 Blockly.MIXLY_TOOLTIP_STORE_EEPROM_READLONG = 'Read long integer data from specific address of EEPROM';
 Blockly.MIXLY_TOOLTIP_STORE_EEPROM_WRITEBYTE = 'Write byte data to EEPROM specific address';
 Blockly.MIXLY_TOOLTIP_STORE_EEPROM_READBYTE = 'Read byte data from specific address of EEPROM';
 Blockly.MIXLY_TOOLTIP_GPS_INIT = 'Initialize GPS equipment with parameters of GPS communication pin and baud rate';
 Blockly.MIXLY_TOOLTIP_GPS_DATA_AVAILABLE = 'Returns whether GPS data is valid';
 Blockly.MIXLY_TOOLTIP_GPS_GETDATA = 'GET %1 data from GPS satellites';
 Blockly.MIXLY_TOOLTIP_LM35 = 'Obtaining the Temperature Return from LM35 Sensor';
 Blockly.MIXLY_TOOLTIP_DS18 = 'Obtain the temperature value returned by DS18B20 sensor';
 Blockly.MIXLY_TOOLTIP_DS1302_INIT = 'Initialize DS1302 RTC clock module with parameters of reset line pin number, data line pin number and clock line pin number.';
 Blockly.MIXLY_TOOLTIP_DS1307_INIT = 'Initialize DS1307 RTC clock module with data line pin number and clock line pin number as parameters';
 Blockly.MIXLY_TOOLTIP_RTC_GETTIME = 'Get %1 from RTC clock module';
 Blockly.MIXLY_TOOLTIP_RTC_SETTIME = Blockly.MIXLY_RTCSETTIME;
 Blockly.MIXLY_TOOLTIP_RTC_SETDATE = Blockly.MIXLY_RTCSETDATE;
 Blockly.MIXLY_TOOLTIP_ADXL345 = 'Get %1 returned by ADXL345 gravity induction module';
 Blockly.MIXLY_TOOLTIP_BLOCKGROUP_SERVO_WRITEMICROSECONDS = 'Set the rotating time of servo (take the value of parameters as [1000,2000])';
 Blockly.MIXLY_TOOLTIP_TONE_NOTE = 'Returns the frequency corresponding to the phonetic name';
 Blockly.MIXLY_TOOLTIP_STEPPER_STEP = 'Initialize two-pin stepper motor';
 Blockly.MIXLY_TOOLTIP_STEPPER_STEP2 = 'Initialize four-pin stepper motor';
 Blockly.MIXLY_TOOLTIP_STEPPER_MOVE = 'Set the number of moving steps of stepper motor';
 Blockly.MIXLY_TOOLTIP_LCD_INIT = 'Initialize LCD display, and set address';
 Blockly.MIXLY_TOOLTIP_LCD_INIT2 = 'Initialize LCD display, set clock line and data line to connect pins and device address';
 Blockly.MIXLY_TOOLTIP_LCD_INIT3 = 'Initialize LCD display, specify all connection pins and device address';
 Blockly.MIXLY_TOOLTIP_LCD_PRINT = 'LCD Display Line Printing';
 Blockly.MIXLY_TOOLTIP_LCD_PRINT2 = 'Display the specified content from line %1, column %2 of the LCD display screen';
 Blockly.MIXLY_TOOLTIP_LCD_POWER = 'Set the LCD Display Style';
 Blockly.MIXLY_TOOLTIP_OLED_DRAW4STRING = 'OLED Display Line Printing';
 Blockly.MIXLY_TOOLTIP_OLED_PRINT = 'Display the specified charactert at line %1, column %2 of the OLED display screen';
 Blockly.MIXLY_TOOLTIP_RGB_DISPLAY2 = 'Set the color of the specify lamp on RGB color lamp module';
 Blockly.MIXLY_TOOLTIP_4digitdisplay_power = 'Set TM1650 Four-digit Tube Display Mode';
 Blockly.MIXLY_TOOLTIP_4digitdisplay_displayString = 'TM1650 four-digit tube display string (scroll over four digits)';
 Blockly.MIXLY_TOOLTIP_4digitdisplay_showDot = 'Display decimal point at specified position of TM1650 four-digit digital tube';
 Blockly.MIXLY_TOOPTIP_4DIGITDISPLAY_TM1637_BRIGHTNESS = 'Set the brightness of TM1637';
   Blockly.MIXLY_DISPLAY_TM1637_Time_Point='Time Point Set';
 Blockly.MIXLY_TOOPTIP_Matrix_HK16T33_INIT = 'Initialize HK16T33 8*8 Matrix Screen';
 Blockly.MIXLY_TOOPTIP_Matrix_HK16T33_POS = 'Single point operation of dot matrix screen, range of XY axis value 1-8';
 Blockly.MIXLY_TOOPTIP_Matrix_HK16T33_ROTATION = 'Rotate Matrix Screen Display Direction';
 Blockly.MIXLY_TOOPTIP_Matrix_HK16T33_TEXT = 'Display one character in turn at a time';
 Blockly.MIXLY_TOOPTIP_Matrix_HK16T33_LEDARRAY = 'Light he corresponding position on the dot matrix screen';
 Blockly.MIXLY_TOOPTIP_Matrix_HK16T33_CLEAR = 'Clear up the content on the dot matrix screen';
 Blockly.MIXLY_TOOPTIP_Matrix_HK16T33_DISPLAYCHAR = 'Generate dot-matrix display content from arrays';
 Blockly.MIXLY_TOOLTIP_ETHERNET_INIT = 'Start the Ethernet service. The parameter is the MAC address of the Ethernet expansion card. Return 1 indicates successful startup and 0 indicates failure.';
 Blockly.MIXLY_TOOLTIP_ETHERNET_MACADDRESS = 'MAC address in pattern of XX-XX-XX-XX-XX-XX-XX, X in any hexadecimal digit';
 Blockly.MIXLY_TOOLTIP_ETHERNET_LOCALIP = 'Return to the local IP address';
 Blockly.MIXLY_TOOLTIP_ETHERNET_CONNECT = 'Connect to remote server, return 1 indicates successful start, others indicate failure';
 Blockly.MIXLY_TOOLTIP_ETHERNET_STOP = 'Disconnect from server';
 Blockly.MIXLY_TOOLTIP_ETHERNET_CONNECTED = 'Returns whether a server has been connected';
 Blockly.MIXLY_TOOLTIP_ETHERNET_CLIENT_AVAILABLE = 'Returns whether there is available data sent by the server';
 Blockly.MIXLY_TOOLTIP_ETHERNET_CLIENT_PRINT = 'Print data to the server that a client is connected to. Prints numbers as a sequence of digits, each an ASCII character (e.g. the number 123 is sent as the three characters \'1\', \'2\', \'3\').';
 Blockly.MIXLY_TOOLTIP_ETHERNET_CLIENT_PRINTLN = 'Print data, followed by a carriage return and newline, to the server a client is connected to. Prints numbers as a sequence of digits, each an ASCII character (e.g. the number 123 is sent as the three characters \'1\', \'2\', \'3\').';
 Blockly.MIXLY_TOOLTIP_ETHERNET_CLIENT_READ = 'Read the next byte received from the server the client is connected to';
 Blockly.MIXLY_TOOLTIP_ETHERNET_GET_REQUEST = 'Send a GET request to the specified address';
 Blockly.MIXLY_TOOLTIP_VARIABLES_CHANGE = 'Mandatory type conversion of constants or variables';
//add max7219 clear tooltip 2019-1-10
Blockly.MIXLY_TOOPTIP_Matrix_MAX7219_CLEAR = Blockly.MIXLY_TOOPTIP_Matrix_MAX7219_CLEAR;
//end
Blockly.LUXE_LED='LED #';
Blockly.LUXE_MOTOR='Motor #';
Blockly.LUXE_STAT='Stat';
Blockly.LUXE_SPEED='Speed';
Blockly.LUXE_DIR='Direction';
Blockly.LUXE_LED_ON='ON';
Blockly.LUXE_LED_OFF='OFF';
Blockly.LUXE_MOTOR_FORWARD='Clockwise';
Blockly.LUXE_MOTOR_REVERSE='Counterclockwise';
Blockly.LUXE_LED_CHANGE='change';
Blockly.LUXE_MOTOR_CHANGE='changeDirection';
Blockly.LUXE_MOTOR_STOP='stop';
Blockly.LUXE_SPEAKER_PLAYSOUND='Play sound';
Blockly.LUXE_SPEANER_NOSOUND='No sound';
Blockly.LUXE_SPEAKER_FREQUENCY='frequency';
Blockly.LUXE_SPEAKER_DURATION='duration';

//-----------------NOVA---------------------------------
Blockly.MIXLY_NOVA_PORT = 'Port';
Blockly.MIXLY_NOVA_STAT = 'Set';
Blockly.MIXLY_NOVA_GET_STAT = 'Get';

// LED
Blockly.MIXLY_NOVA_LED = 'LED';
Blockly.MIXLY_NOVA_LED_ON = 'ON';
Blockly.MIXLY_NOVA_LED_OFF = 'OFF';

// Button
Blockly.MIXLY_NOVA_BUTTON_PRESSED = 'Pressed';
Blockly.MIXLY_NOVA_BUTTON_RELEASED = 'Released';
Blockly.MIXLY_NOVA_BTN = 'Button ';
Blockly.MIXLY_NOVA_ABCD = '#';

Blockly.MIXLY_NOVA_TILTSWITCH = 'Tilt Switch';
Blockly.MIXLY_NOVA_SOUND = 'Sound';
Blockly.MIXLY_NOVA_LIMISWICTH = 'Limit Switch';
Blockly.MIXLY_NOVA_LIGHT = 'Light';

Blockly.MIXLY_NOVA_BUZZER = 'Buzzer';
Blockly.MIXLY_NOVA_FREQUENCY = 'Frequency(Hz)';
Blockly.MIXLY_NOVA_MIXLY_DURATION = 'Duration(ms)';

Blockly.MIXLY_NOVA_MOTOR = 'DC Motor';
Blockly.MIXLY_NOVA_MOTOR_SPEED = 'Speed(-100~100)%';

Blockly.MIXLY_NOVA_ULTRASONIC = 'Ultrasonic(cm)';

Blockly.MIXLY_NOVA_DHT11 = 'DHT11';
Blockly.MIXLY_NOVA_TYPE = 'Type';
Blockly.MIXLY_NOVA_DHT11_H = 'GetHumidity';
Blockly.MIXLY_NOVA_DHT11_T = 'GetTemperature';

Blockly.MIXLY_NOVA_SERVO = 'Servo';
Blockly.MIXLY_NOVA_DEGREE_0_180 = 'Degree（0~180）';
Blockly.MIXLY_NOVA_DELAY = 'Delay';
Blockly.MIXLY_NOVA_DELAY_MS = 'ms';

Blockly.MIXLY_NOVA_LINEFINDER = 'LineFinder';
Blockly.MIXLY_NOVA_L = 'LeftState';
Blockly.MIXLY_NOVA_R = 'RightState';
Blockly.MIXLY_NOVA_READ = 'GetLineState';

Blockly.MIXLY_NOVA_4DIGITDISPLAY = 'Digitdisplay';
Blockly.MIXLY_NOVA_NUMBER = 'Number';
Blockly.MIXLY_NOVA_DISPLAY_HOUR= 'Display Hour';
Blockly.MIXLY_NOVA_DISPLAY_MIN = 'Display Minute';

Blockly.MIXLY_NOVA_RTC = 'Real Time Clock';
Blockly.MIXLY_NOVA_RTC_SEC = 'Sec';
Blockly.MIXLY_NOVA_RTC_MIN = 'Min';
Blockly.MIXLY_NOVA_RTC_HOUR = 'Hour';
Blockly.MIXLY_NOVA_RTC_WEEK = 'Week';
Blockly.MIXLY_NOVA_RTC_DAY = 'Day';
Blockly.MIXLY_NOVA_RTC_MON = 'Mon';
Blockly.MIXLY_NOVA_RTC_YEAR = 'Year';

Blockly.MIXLY_NOVA_IR_REC = 'Infrared Receiver';

Blockly.MIXLY_NOVA_BLUETOOTH = 'Bluetooth';
Blockly.MIXLY_NOVA_BLUETOOTH_AVAILABLE = 'Available？';
Blockly.MIXLY_NOVA_BLUETOOTH_READ_STR = 'ReadString';
Blockly.MIXLY_NOVA_BLUETOOTH_READ_NUM = 'ReadNumber';

//spi
Blockly.TO_SPI_SLAVE_PIN='To SPI Slave PIN#';
Blockly.SPI_TRANSFER='transfer';

Blockly.MIXLY_SERIAL_BEGIN='baud rate';
Blockly.MIXLY_SERIALBT_BEGIN='init';
Blockly.MIXLY_SERIALBT_INIT='ESP32 Bluetooth Name';
Blockly.MIXLY_SERIALBT_AVAILABLE='ESP32 Bluetooth readable';
Blockly.MIXLY_SERIALBT_READ='ESP32 Bluetooth Data';
Blockly.MIXLY_SERIALBT_WRITE='ESP32 Bluetooth Send Data';
Blockly.MIXLY_ESP32_RUNNING_CORE='ESP32 Dual Core';
Blockly.MIXLY_CONTROL_CORE_DELAY='ESP32 Dual Core Delay';
Blockly.MIXLY_ESP32_RUNNING_CORE_PRIORITY='Priority';
//stepper
Blockly.MIXLY_STEPPER='Stepper';
Blockly.MIXLY_STEPPER_SETUP_STEPPER='Setup Stepper';
Blockly.MIXLY_STEPPER_PIN1='PIN1#';
Blockly.MIXLY_STEPPER_PIN2='PIN2#';
Blockly.MIXLY_STEPPER_PIN3='PIN3#';
Blockly.MIXLY_STEPPER_PIN4='PIN4#';
Blockly.MIXLY_STEPSPERREVOLUTION='steps per revolution';
Blockly.MIXLY_STEPPER_SET_SPEED='setSpeed';
Blockly.MIXLY_STEPPER_STEP='step';

//-----------------Ethernet------------------------------------
Blockly.MIXLY_ETHERNET_BEGIN='Begin (DHCP)';
Blockly.MIXLY_ETHERNET='Ethernet';
Blockly.MIXLY_ETHERNET2='Ethernet2';
Blockly.MIXLY_ETHERNET_MAC_ADDRESS='Mac Address';
Blockly.MIXLY_ETHERNET_LOCALIP='localIP';
Blockly.MIXLY_ETHERNET_CLINET_CONNECT_SERVER='Clinet.Connect Host';
Blockly.MIXLY_ETHERNET_CLINET_PORT='Port';
Blockly.MIXLY_ETHERNET_CLINET_STOP='Client.stop';
Blockly.MIXLY_ETHERNET_CLINET_CONNECTED='Client.connected';
Blockly.MIXLY_ETHERNET_CLINET_AVAILABLE='Client.available';
Blockly.MIXLY_ETHERNET_CLINET_PRINT='Client.print';
Blockly.MIXLY_ETHERNET_CLINET_PRINTLN='Client.println';
Blockly.MIXLY_ETHERNET_CLINET_READ='Client.read';
Blockly.MIXLY_ETHERNET_CLINET_GET_REQUEST='GET Request';
Blockly.MIXLY_ETHERNET_CLINET_URL='URL';
Blockly.MIXLY_ETHERNET_CLINET_SERVER='Host';

//lm35温度传感器
Blockly.MIXLY_LM35='LM35 Temperature';

//DS18B20温度传感器
Blockly.MIXLY_DS18B20='DS18B20 PIN#';
Blockly.MIXLY_DS18B20_GET_TEMP='getTemperature';
Blockly.MIXLY_DS18B20_C='°C';
Blockly.MIXLY_DS18B20_F='°F';

//GPS
Blockly.MIXLY_GPS_INIT='GPS init';
Blockly.MIXLY_GPS_DATA_AVAILABLE='GPS data is available';
Blockly.MIXLY_GPS_DATA_ENCODE='GPS encode data successful';
Blockly.MIXLY_GPS_LOCATION='location';
Blockly.MIXLY_GPS_DATE='date';
Blockly.MIXLY_GPS_TIME='time';
Blockly.MIXLY_GPS_ISVALID='isValid';
Blockly.MIXLY_GPS_GET='GPS get';
Blockly.MIXLY_GPS_LOCATION_LAT='location-latitude';
Blockly.MIXLY_GPS_LOCATION_LNG='location-longitude';
Blockly.MIXLY_GPS_DATE_YEAR='date-year';
Blockly.MIXLY_GPS_DATE_MONTH='date-month';
Blockly.MIXLY_GPS_DATE_DAY='date-day';
Blockly.MIXLY_GPS_TIME_HOUR='time-hour';
Blockly.MIXLY_GPS_TIME_MINUTE='time-minute';
Blockly.MIXLY_GPS_TIME_SECOND='time-second';
Blockly.MIXLY_GPS_TIME_CENTISECOND='time-centisecond';

//factory
Blockly.MIXLY_PARAMS = 'parameters';

//MsTimer2
Blockly.MIXLY_MSTIMER2_EVERY='every';
Blockly.MIXLY_MSTIMER2_DO='do';
Blockly.MIXLY_MSTIMER2_START='start';
Blockly.MIXLY_MSTIMER2_STOP='stop';
//interrupts
Blockly.MIXLY_CONTROL_INTERRUPTS = 'interrupts';
Blockly.MIXLY_CONTROL_NOINTERRUPTS = 'nointerrupts';
//SCoop
Blockly.MIXLY_CONTROL_SCoop_Init = 'setup';
Blockly.MIXLY_CONTROL_SCoop_loop = 'loop';
Blockly.MIXLY_CONTROL_SCoop_yield = 'yield SCoop tasks';
Blockly.MIXLY_CONTROL_SCoop_sleep = 'SCoop sleep(only for SCoop)';
//others
Blockly.MIXLY_WARNING_NOT_DECLARE='This variable is not declared!';
Blockly.MIXLY_LENGTH = "length of";
Blockly.MIXLY_EQUALS="equals";
Blockly.MIXLY_STARTSWITH="startsWith";
Blockly.MIXLY_ENDSWITH="endsWith";
Blockly.MIXLY_COMPARETO="compareTo";
Blockly.MIXLY_COMPARETO_HELP="compare based on dictory, equal retrun 0 ,bigger return positive，else return negative";
Blockly.Msg.UNDO = "Undo";
Blockly.Msg.REDO = "Redo";
Blockly.MIXLY_CONTROL_END_PROGRAM = "end program";
Blockly.MIXLY_CONTROL_NOTES = 'Notes:';

//oled
Blockly.Msg.texttodisplay = "texts to display:";
Blockly.Msg.OLEDDISPLAY = "display";
Blockly.Msg.todisplay = "to display:";
Blockly.Msg.rawx = "raw x(127 max)";
Blockly.Msg.liney = "line y(63 max)";
Blockly.Msg.line1 = "line1=";
Blockly.Msg.line2 = "line2=";
Blockly.Msg.line3 = "line3=";
Blockly.Msg.line4 = "line4=";
Blockly.Msg.num1 = "Number 1(at end)=";
Blockly.Msg.num2 = "Number 2(at end)=";
Blockly.Msg.num3 = "Number 3(at end)=";
Blockly.Msg.num4 = "Number 4(at end)=";
// RGB
Blockly.MIXLY_RGB_INIT = 'RGB Initialize';
Blockly.MIXLY_RGB_SET_BRIGHTNESS = 'RGB Set Brightness';
Blockly.MIXLY_RGB_SET_COLOR = 'RGB Set color';
Blockly.MIXLY_RGB_SHOW = 'RGB Show';
Blockly.MIXLY_RGB_BRIGHTNESS = 'Brightness';
Blockly.MIXLY_RGB = 'RGB Light';
Blockly.MIXLY_RGB_NUM = 'Light number';
Blockly.MIXLY_RGB_COUNT = 'Light Count';
Blockly.MIXLY_RGB_R = 'R value';
Blockly.MIXLY_RGB_G = 'G value';
Blockly.MIXLY_RGB_B = 'B value';

//四位数码管
Blockly.MIXLY_4DIGITDISPLAY = 'Digitdisplay';
Blockly.MIXLY_4DIGITDISPLAY_DISPLAYSTRING = 'displayString';
Blockly.MIXLY_4DIGITDISPLAY_NOMBER1 = 'No.';
Blockly.MIXLY_4DIGITDISPLAY_NOMBER2 = '';
Blockly.MIXLY_4DIGITDISPLAY_DOT = 'Dot';
Blockly.MIXLY_4DIGITDISPLAY_ON = 'On';
Blockly.MIXLY_4DIGITDISPLAY_OFF = 'Off';
Blockly.MIXLY_0DEGREE='0度';
Blockly.MIXLY_90DEGREE='90度';
Blockly.MIXLY_180DEGREE='180度';
Blockly.MIXLY_270DEGREE='270度';

//MAX7219
Blockly.MIXLY_MAX7219_INIT_NUM='Number of LED dot matrix modules';
Blockly.MIXLY_MAX7219_PUTSTR='Number of LED dot matrix modules';
Blockly.MIXLY_SPEED='speed';
Blockly.MIXLY_BRIGHTNESS='brightness';
Blockly.MIXLY_MAX7219_BRIGHTNESS_TOOLTIP='brightness Range0~15'
Blockly.MIXLY_MAX7219_LEDARRAY='pattern array';
Blockly.MIXLY_MAX7219='MAX7219 LED dot matrix';
Blockly.MIXLY_MAX7219_INIT='Initialize LED(MAX7219) dot matrix';
Blockly.MIXLY_MAX7219_IMG='Presupposition pattern';
Blockly.MIXLY_MAX7219_HDISPALY='水平点阵屏数';
Blockly.MIXLY_MAX7219_VDISPALY='竖直点阵屏数';
Blockly.MAX7219_FILLSCREEN_ON='ALL ON';
Blockly.MAX7219_FILLSCREEN_OFF='ALL OFF';
Blockly.MAX7219_SHUTDOWN_ON='Turn On Screen';
Blockly.MAX7219_SHUTDOWN_OFF='Turn Off Screen';
Blockly.MIXLY_MAX7219_NO='Screen No';
Blockly.MIXLY_TOOPTIP_Matrix_MAX7219_CLEAR = Blockly.MIXLY_TOOPTIP_Matrix_MAX7219_CLEAR;
Blockly.MAX7219_INIT_TOOLTIP = 'Initialize LED(MAX7219) dot matrix ';
Blockly.MIXLY_TOOPTIP_Matrix_MAX7219_STRING = '按一定速度逐个显示字符串中的每个字符';
Blockly.MIXLY_TOOPTIP_Matrix_MAX7219_PREDEFARR = '返回预先定义的图案对应的数组';

//TM1637
Blockly.MIXLY_4DIGITDISPLAY_TM1637 = 'TM1637';
Blockly.MIXLY_4DIGITDISPLAY_TM1637_DISPLAYPRINT = 'TM1637 Show';
Blockly.MIXLY_4DIGITDISPLAY_TM1637_DISPLAYSTRING_TIP = 'Less than or equal to 4 characters for display and more than 4 characters for scroll.';
Blockly.MIXLY_4DIGITDISPLAY_TM1637_TIP = 'It must be initialized with two pins. CLK is the clock pin and DIO is the data pin.';
Blockly.MIXLY_4DIGITDISPLAY_TM1637_DISPLAYTIME = 'TM1637 Show time';
Blockly.MIXLY_4DIGITDISPLAY_TM1637_DISPLAYTIME_TOOLTIP = Blockly.MIXLY_4DIGITDISPLAY_TM1637_DISPLAYTIME;
Blockly.MIXLY_4DIGITDISPLAY_TM1637_INIT = 'TM1637 Init';
Blockly.MIXLY_4DIGITDISPLAY_TM1637_BRIGHTNESS = 'TM1637 Brightness';
Blockly.MIXLY_4DIGITDISPLAY_4DIGITDISPLAY_BRIGHTNESS_TOOLTIP = '';
Blockly.MIXLY_4DIGITDISPLAY_TM1637_CLEARDISPLAY = 'TM1637 clear screen';

Blockly.MIXLY_YEAR = 'Y';
Blockly.MIXLY_MONTH = 'M';
Blockly.MIXLY_DAY = 'D';
Blockly.MIXLY_HOUR = 'H';
Blockly.MIXLY_MINUTE = 'M';
Blockly.MIXLY_SECOND = 'S';
Blockly.MIXLY_WEEK = 'W';
Blockly.MIXLY_MILLISECOND = 'Microsecond';
Blockly.MIXLY_DS1302_INITPIN = 'Initialize DS1302 RTC clock module PIN'
Blockly.MIXLY_SETDATE = 'SetDate:';
Blockly.MIXLY_DATEFORMATE = 'DateFormat(Y-M-D)'
Blockly.MIXLY_TIMEFORMATE = 'TimeForamt(H:M:S)';
//8*8点阵显示屏
Blockly.MIXLY_DISPLAY_MATRIX_INIT = "Init 8*8 dot matrix display screen(HT16K33)";
Blockly.MIXLY_DISPLAY_MATRIX_SHOW = "Dot matrix display";
Blockly.MIXLY_DISPLAY_MATRIX_X = 'X Axis';
Blockly.MIXLY_DISPLAY_MATRIX_Y = 'Y Axis';
Blockly.MIXLY_DISPLAY_MATRIX_SHOWPOINT = ' Single point set to';
Blockly.MIXLY_DISPLAY_MATRIX_SHOWPOINT_TOOLTIP = 'Single point operation on the dot matrix screen, XY axis value range 1-8';
Blockly.MIXLY_DISPLAY_MATRIX_CLEAR = " Dot matrix clear";
Blockly.MIXLY_DISPLAY_MATRIX_ARRAYVAR = "Array variable";
Blockly.MIXLY_DISPLAY_MATRIX_PICARRAY = " Pictur Array";
Blockly.MIXLY_DISPLAY_MATRIX_ROTATE = "Rotate screen";

Blockly.MIXLY_RTCINIT = 'Initialize DS1307 RTC clock module';
Blockly.MIXLY_RTCGETTIME = 'from RTC clock module get';
Blockly.MIXLY_RTCSETTIME = 'Set time of RTC clock module';
Blockly.MIXLY_RTCSETDATE = 'Set date of RTC clock module';

Blockly.MIXLY_ADXL345 = 'Acceleration_ADXL345';
Blockly.MIXLY_ADXL345_X= 'X-axis acceleration';
Blockly.MIXLY_ADXL345_Y= 'Y-axis acceleration';
Blockly.MIXLY_ADXL345_Z=  'Z-axis acceleration';
Blockly.MIXLY_ADXL345_XA=  'X-axis angle';
Blockly.MIXLY_ADXL345_YA=  'Y-axis angle';
Blockly.MIXLY_ADXL345_ZA =  'Z-axis angle';
//////////// microbit js ///////////////////
Blockly.MIXLY_MICROBIT_JS_IS_GESTURE='Is gesture ';
Blockly.MIXLY_MICROBIT_JS_SERIAL_WHEN_CONTAIN_DATA='When Serial recevied data containing ';
Blockly.MIXLY_MICROBIT_JS_SERIAL_READ_LINE='Serial read one line';
Blockly.MIXLY_MICROBIT_JS_RANDOM_BOOLEAN='Random true or false';
Blockly.MIXLY_MICROBIT_JS_PERIOD='set period(us)';
Blockly.MIXLY_MICROBIT_JS_LAST_PULSE_PERIOD='get the period(us) of the last pulse';
Blockly.MIXLY_MICROBIT_JS_PULSE_STATUS='pulse mode';
Blockly.MIXLY_MICROBIT_JS_RADIO_SEND_NUMBER='radio send number';
Blockly.MIXLY_MICROBIT_JS_RADIO_SEND_VALUE='radio send value';
Blockly.MIXLY_MICROBIT_JS_RADIO_SEND_STRING='radio send string';
Blockly.MIXLY_MICROBIT_JS_RADIO_ON_RECEIVE='on radio received';
Blockly.MIXLY_MICROBIT_JS_RADIO_SET_GROUP='radio set group';
Blockly.MIXLY_MICROBIT_JS_RADIO_SET_TRANSMIT_POWER='radio set transmit power';
Blockly.MIXLY_MICROBIT_JS_RADIO_SET_TRANSMIT_SERIAL_NUMBER='radio set transmit serial number';
Blockly.MIXLY_MICROBIT_JS_RADIO_WRITE_RECEIVE_PACKET_TO_SERIAL='radio write received packet to serial';
Blockly.MIXLY_MICROBIT_JS_CREATE_SPRITE='create sprite at x:';
Blockly.MIXLY_MICROBIT_JS_Y='y:';
Blockly.MIXLY_MICROBIT_JS_MOVE_BY='move by';
Blockly.MIXLY_MICROBIT_JS_DELETE_VAR='delete';
Blockly.MIXLY_MICROBIT_JS_TURN='turn';
Blockly.MIXLY_MICROBIT_JS_BY_ANGLE='by (ANGLE)';
Blockly.MIXLY_MICROBIT_JS_NUMBER='by';
Blockly.MIXLY_MICROBIT_JS_CHANGE='change';
Blockly.MIXLY_MICROBIT_JS_TOUCH='touch';
Blockly.MIXLY_MICROBIT_JS_TOUCH_EDGE='touch edge?';
Blockly.MIXLY_MICROBIT_JS_CHANGE_SCORE='change score by';
Blockly.MIXLY_MICROBIT_JS_SET_SCORE='set score';
Blockly.MIXLY_MICROBIT_JS_ON_EDGE_BOUNCE='if on edge, bounce'
Blockly.MIXLY_MICROBIT_JS_START_COUNTDOWN='start countdown(ms)';
Blockly.MIXLY_MICROBIT_JS_SCORE='game score';
Blockly.MIXLY_MICROBIT_JS_GAME_OVER='game over';
Blockly.MIXLY_MICROBIT_JS_GAME_RESUME='game resume';
Blockly.MIXLY_MICROBIT_JS_GAME_PAUSE='game pause';
Blockly.MIXLY_MICROBIT_JS_ACCELERATION='acceleration (mg)';
Blockly.MIXLY_MICROBIT_JS_SET_ACCELERATION='set acceleration range';
Blockly.MIXLY_MICROBIT_JS_LIGHT_LEVEL='light level';
Blockly.MIXLY_MICROBIT_JS_CALIBRATE_COMPASS='calibrate compass';
Blockly.MIXLY_MICROBIT_JS_GET_COMPASS='get compass';
Blockly.MIXLY_MICROBIT_JS_COMPASS_HEADING='compass heading(angle)';
Blockly.MIXLY_MICROBIT_JS_ROTATION='rotation(angle)';
Blockly.MIXLY_MICROBIT_JS_MAGETIC_FORCE='magnetic force(uT)';
Blockly.MIXLY_MICROBIT_JS_BEAT='beats';
Blockly.MIXLY_MICROBIT_JS_RING_TONE='ring tone (Hz)';
Blockly.MIXLY_MICROBIT_JS_REST_TONE='rest(ms)';
Blockly.MIXLY_MICROBIT_JS_START_MELODY='start melody';
Blockly.MIXLY_MICROBIT_JS_MUSIC_EVENT='music on';
Blockly.MIXLY_MICROBIT_JS_GET_TEMPO='tempo (bpm)';
Blockly.MIXLY_MICROBIT_JS_CHANGE_TEMPO='change tempo by (bpm)';
Blockly.MIXLY_MICROBIT_JS_SET_TEMPO='set tempo to (bpm)';
Blockly.MIXLY_MICROBIT_JS_I2C_READ_ADDRESS='i2c read number at address';
Blockly.MIXLY_MICROBIT_JS_I2C_FORMAT='of format';
Blockly.MIXLY_MICROBIT_JS_I2C_WRITE_ADDRESS='i2c write number at address';
Blockly.MIXLY_MICROBIT_JS_I2C_VALUE='of value';
Blockly.MIXLY_MICROBIT_JS_I2C_BIT='byte';
Blockly.MIXLY_MICROBIT_JS_I2C_SETUP='i2c init';
Blockly.MIXLY_MICROBIT_JS_SPI_WRITE="spi write";
Blockly.MIXLY_MICROBIT_JS_SPI_FREQUENCY="spi frequency";
Blockly.MIXLY_MICROBIT_JS_SPI_FORMAT="spi format";
Blockly.MIXLY_MICROBIT_JS_SPI_SET_PINS="spi set pins";
Blockly.MIXLY_MICROBIT_JS_BLE_SERVICE='bluetooth service';
Blockly.MIXLY_MICROBIT_JS_BLE_ON_CONNECTED='on bluetooth connected';
Blockly.MIXLY_MICROBIT_JS_BLE_ON_DISCONNECTED='on bluetooth disconnected';
Blockly.MIXLY_MICROBIT_JS_BLE_ON_RECEIVE='bluetooth on data received';
Blockly.MIXLY_MICROBIT_JS_BLE_CONNECTED='connectable';
Blockly.MIXLY_MICROBIT_JS_BLE_NAMESPACE='namespace(bytes 6-9)';
Blockly.MIXLY_MICROBIT_JS_BLE_INSTANCE='instance(bytes 2-6)';
Blockly.MIXLY_MICROBIT_JS_BLE_POWER='power';
Blockly.MIXLY_MICROBIT_JS_BLE_URL='url'
Blockly.MIXLY_MICROBIT_JS_BLE_WRITE_NUMBER='bluetooth uart write number';
Blockly.MIXLY_MICROBIT_JS_BLE_WRITE_STRING='bluetooth uart write string';
Blockly.MIXLY_MICROBIT_JS_BLE_WRITE_VALUE='bluetooth uart write value';
Blockly.MIXLY_MICROBIT_JS_BLE_UART_SERVICE='bluetooth uart service';
Blockly.MIXLY_MICROBIT_JS_BLE_STOP_ADVERTISING='bluetooth stop advertising';
Blockly.MIXLY_MICROBIT_JS_BLE_SET_POWER='bluetooth set transmit power';
Blockly.MIXLY_MICROBIT_JS_BLE_READ_UNTIL='bluetooth uart read until';
Blockly.MIXLY_MICROBIT_JS_BLE_URL_CONNECTED='bluetooth advertise url. connectable';
Blockly.MIXLY_MICROBIT_JS_BLE_UID_CONNECTED='bluetooth advertise UID. connectable';
Blockly.MIXLY_MICROBIT_JS_SYSTEM_RUN_BACKGROUND='run in background';
Blockly.MIXLY_MICROBIT_JS_SYSTEM_RESET='reset';
Blockly.MIXLY_MICROBIT_JS_SYSTEM_WAIT='wait (us)';
Blockly.MIXLY_MICROBIT_JS_SYSTEM_RAISE_SOURCE='raise event from source';
Blockly.MIXLY_MICROBIT_JS_SYSTEM_RAISE_VALUE='with value';
Blockly.MIXLY_MICROBIT_JS_SYSTEM_ON_SOURCE='on event from source';
Blockly.MIXLY_MICROBIT_JS_SYSTEM_TIMESTAMP='event timestamp';
Blockly.MIXLY_MICROBIT_JS_SYSTEM_VALUE='event value';
Blockly.MIXLY_MICROBIT_JS_SYSTEM_DEVICE_NAME='device name';
Blockly.MIXLY_MICROBIT_JS_SYSTEM_DEVICE_SERIAL_NUMBER='device serial number';
Blockly.MIXLY_MICROBIT_JS_MONITOR_SHOW_NUMBER='show number';
Blockly.MIXLY_MICROBIT_JS_MONITOR_SHOW_STRING='show string';
Blockly.MIXLY_MICROBIT_JS_MONITOR_SHOW_IMAGE_OR_STRING='show image/string';
Blockly.MIXLY_MICROBIT_JS_MONITOR_SHOW_STRING_ONE_BY_ONE='show';
Blockly.MIXLY_MICROBIT_JS_MONITOR_SHOW_LEDS='show leds';
Blockly.MIXLY_MICROBIT_JS_MONITOR_SHOW_ARROW='show arrow';
Blockly.MIXLY_MICROBIT_JS_MONITOR_CLEAR_SCREEN='clear screen';
Blockly.MIXLY_MICROBIT_JS_MONITOR_PLOT_POINT_X='plot x';
Blockly.MIXLY_MICROBIT_JS_MONITOR_PLOT_POINT_Y='y';
Blockly.MIXLY_MICROBIT_JS_MONITOR_UNPLOT_POINT_X='unplot x';
Blockly.MIXLY_MICROBIT_JS_MONITOR_TOGGLE_POINT_X='toggle x';
Blockly.MIXLY_MICROBIT_JS_MONITOR_GET_POINT_X='point x';
Blockly.MIXLY_MICROBIT_JS_MONITOR_PLOT_BAR_START='plot bar graph of';
Blockly.MIXLY_MICROBIT_JS_MONITOR_PLOT_BAR_END='up to';
Blockly.MIXLY_MICROBIT_JS_MONITOR_BRIGHTNESS='brightness';
Blockly.MIXLY_MICROBIT_JS_MONITOR_SET_BRIGHTNESS='set brightness';
Blockly.MIXLY_MICROBIT_JS_MONITOR_STOP_ANIMATION='stop animation';
Blockly.MIXLY_MICROBIT_JS_MONITOR_LED_ENABLE='led enable';
Blockly.MIXLY_MICROBIT_JS_MONITOR_SHOW_IMAGE='show image';
Blockly.MIXLY_MICROBIT_JS_MONITOR_AT_OFFSET='at offset';
Blockly.MIXLY_MICROBIT_JS_MONITOR_CREATE_IMAGE='create image';
Blockly.MIXLY_MICROBIT_JS_MONITOR_SCROLL_IMAGE='scroll image';
Blockly.MIXLY_MICROBIT_JS_MONITOR_WITH_OFFSET='with offset';
Blockly.MIXLY_MICROBIT_JS_MONITOR_SCROLL_INTERVAL='and interval(ms)';
Blockly.MIXLY_MICROBIT_JS_MONITOR_CREATE_BIG_IMAGE='create big image';
Blockly.MIXLY_MICROBIT_JS_MONITOR_ARROW_IMAGE='arrow image';
Blockly.MIXLY_MICROBIT_JS_TYPE_NUMBER='number';
Blockly.MIXLY_MICROBIT_JS_TYPE_STRING='string';
Blockly.MIXLY_MICROBIT_JS_TYPE_BOOLEAN='boolean';
Blockly.MIXLY_MICROBIT_JS_TYPE_ARRAY_NUMBER='Array<number>';
Blockly.MIXLY_MICROBIT_JS_TYPE_ARRAY_STRING='Array<string>';
Blockly.MIXLY_MICROBIT_JS_LIST_ADD_VALUE='add value';
Blockly.MIXLY_MICROBIT_JS_LIST_TO_END='to end';
Blockly.MIXLY_MICROBIT_JS_LIST_GET_AND_REMOVE_LAST='get and remove last value from ';
Blockly.MIXLY_MICROBIT_JS_LIST_INSERT_AT='insert at';
Blockly.MIXLY_MICROBIT_JS_LIST_VALUE='value';
Blockly.MIXLY_MICROBIT_JS_LIST_REVERSE='reverse';
Blockly.MIXLY_MICROBIT_JS_LIST_CLEAR='clear';
Blockly.MIXLY_MICROBIT_JS_LIST_GET_AND_REMOVE_FIRST='get and remove first value from';
Blockly.MIXLY_MICROBIT_JS_LIST_INSERT='insert';
Blockly.MIXLY_MICROBIT_JS_LIST_AT_BEGINNING='at beginning';
Blockly.MIXLY_MICROBIT_JS_LIST_FIND_INDEX_OF='find index of';
Blockly.MIXLY_MICROBIT_JS_LIST_REMOVE_VALUE_AT='remove value at';
Blockly.MIXLY_MICROBIT_JS_LIST_REMOVE_VALUE_XIANG='';
Blockly.MIXLY_MICROBIT_JS_INTERRUPT_BTN='Interrupt Button#';

Blockly.MIXLY_MICROBIT_JS_INOUT_ANALOG_PITCH = 'analog pitch ';
Blockly.MIXLY_MICROBIT_JS_INOUT_FREQUENCY ='for (ms)';
Blockly.Msg.INOUT_ANALOGPITCH  = "analog pitch for some time";
Blockly.MIXLY_MICROBIT_JS_INOUT_SETPIN  = "set pin#";
Blockly.MIXLY_MICROBIT_JS_INOUT_EMITEVENTS  = "to emit";
Blockly.MIXLY_MICROBIT_JS_INOUT_EVENT_EDGE = "edge";
Blockly.MIXLY_MICROBIT_JS_INOUT_EVENT_PULSE = "pulse";
Blockly.MIXLY_MICROBIT_JS_INOUT_EVENT_TOUCH = "touch";
Blockly.MIXLY_MICROBIT_JS_INOUT_EVENT_NONE = "none";
Blockly.MIXLY_MICROBIT_JS_INOUT_SETPULL  = "to";
Blockly.Msg.INOUT_SETEVENT  = "configure the emit event by the pin";
Blockly.MIXLY_MICROBIT_JS_INOUT_PULL_UP = "pull";
Blockly.MIXLY_MICROBIT_JS_INOUT_PULL_DOWN = "down";
Blockly.MIXLY_MICROBIT_JS_INOUT_PULL_NONE = "none";
Blockly.Msg.INOUT_SETPULL  = "configure the pull of the pin";
Blockly.MIXLY_MICROBIT_JS_INOUT_SET_PITCH_PIN  = "analog set pitch pin#";
Blockly.Msg.INOUT_SET_PITCH_PIN  = "set the analog pitch pin";
Blockly.MIXLY_MICROBIT_shake='shake';
Blockly.MIXLY_MICROBIT_up='up';
Blockly.MIXLY_MICROBIT_down='down';
Blockly.MIXLY_MICROBIT_left='left';
Blockly.MIXLY_MICROBIT_right='right';
Blockly.MIXLY_MICROBIT_face_up='face up';
Blockly.MIXLY_MICROBIT_face_down='face down';
Blockly.MIXLY_MICROBIT_freefall='freefall';
//microbit
Blockly.MIXLY_MICROBIT_Accelerometer_X='acceleration(Dimension.X)';
Blockly.MIXLY_MICROBIT_Accelerometer_Y='acceleration(Dimension.Y)';
Blockly.MIXLY_MICROBIT_Accelerometer_Z='acceleration(Dimension.Z)';
Blockly.MIXLY_MICROBIT_Was_gesture='was gesture %1';
Blockly.MIXLY_MICROBIT_Is_gesture='is gesture %1';
Blockly.MIXLY_MICROBIT_shake='shake';
Blockly.MIXLY_MICROBIT_up='up';
Blockly.MIXLY_MICROBIT_down='down';
Blockly.MIXLY_MICROBIT_left='left';
Blockly.MIXLY_MICROBIT_right='right';
Blockly.MIXLY_MICROBIT_face_up='face up';
Blockly.MIXLY_MICROBIT_face_down='face down';
Blockly.MIXLY_MICROBIT_freefall='freefall';
Blockly.MIXLY_MICROBIT_Get_gestures='get gestures';
Blockly.MIXLY_MICROBIT_Current_gesture='current gesture';
Blockly.MIXLY_MICROBIT_Button_is_pressed='button %1 is pressed';
Blockly.MIXLY_MICROBIT_Button_was_pressed='button %1 was pressed';
Blockly.MIXLY_MICROBIT_Get_number_of_presses_for_button='get number of presses for button %1 ';
Blockly.MIXLY_MICROBIT_Calibrate_compass='calibrate compass';
Blockly.MIXLY_MICROBIT_Compass_is_calibrated='compass is calibrated？';
Blockly.MIXLY_MICROBIT_Compass_heading='compass heading';
Blockly.MIXLY_MICROBIT_Compass_field_strength='compass field strength';
Blockly.MIXLY_MICROBIT_Get_brightness_at='get brightness X %1 Y %2';
Blockly.MIXLY_MICROBIT_Set_brightness_at='set X %1 Y %2 brightness %3';
Blockly.MIXLY_MICROBIT_Clear_display='clear display';
Blockly.MIXLY_MICROBIT_Show_image='show image %1';
Blockly.MIXLY_MICROBIT_SHOW_IMAGE_OR_STRING='show (image/string)';
Blockly.MIXLY_MICROBIT_Animate_images_or_string='animate image/string %1 delay %2 (ms) %3 wait for %4 %5 repeating %6 %7 clear %8';
Blockly.MIXLY_MICROBIT_Scroll_message='scroll message %1';
Blockly.MIXLY_MICROBIT_Turn_on_display='turn on diaplay';
Blockly.MIXLY_MICROBIT_Turn_off_display='turn off display';
Blockly.MIXLY_MICROBIT_monitor = "Display";
Blockly.MIXLY_MICROBIT_Display_is_on='Display is on？';
Blockly.MIXLY_MICROBIT_Built_in_image='built in image %1';
Blockly.MIXLY_MICROBIT_Copy_image='copy image %1';
Blockly.MIXLY_MICROBIT_Invert_image='invert image %1';
Blockly.MIXLY_MICROBIT_Create_image='create image %1 %2 %3 %4 %5 %6 %7 %8 %9 %10 %11 %12 %13 %14 %15 %16 %17 %18 %19 %20 %21 %22 %23 %24 %25 %26 %27 %28 %29 %30';
Blockly.MIXLY_MICROBIT_Panic_with_status_code='Panic with status code %1';
Blockly.MIXLY_MICROBIT_Sleep='sleep %1 (ms)';
Blockly.MIXLY_MICROBIT_Running_time='running time';
Blockly.MIXLY_MICROBIT_Board_temperature='board temperature';
Blockly.MIXLY_MICROBIT_Reset_micro='reset micro:bit';
Blockly.MIXLY_MICROBIT_Play_built_in_melody='play built-in melody %1 pin #%2 %3 wait for %4 %5 repeating %6';
Blockly.MIXLY_MICROBIT_Play_built_in_melody_easy='play built-in melody %1 pin #%2 %3';
Blockly.MIXLY_MICROBIT_Play_pitch='play pitch %1 %2 for %3 ms';
Blockly.MIXLY_MICROBIT_Play_notes='play tone %1 pin #%2 wait for %3 %4 repeating %5';
Blockly.MIXLY_MICROBIT_Reset_music='reset music';
Blockly.MIXLY_MICROBIT_Stop_music='stop music';
Blockly.MIXLY_MICROBIT_Set_tempo='set tempo: 1 beat %1 ticks at %2 bpm';
Blockly.MIXLY_MICROBIT_Get_current_tempo='get current tempo';
Blockly.MIXLY_MICROBIT_Initialise_pin='initialise pin %1 with %2 neopixel[s] %3';
Blockly.MIXLY_MICROBIT_Clear_neopixels='clear neopixels on %1';
Blockly.MIXLY_MICROBIT_Show_neopixels='show neopixels on %1';
Blockly.MIXLY_MICROBIT_Using_neopixels='using neopixels on %1 set pixel in position %2 with red %3 green %4 blue %5';
Blockly.MIXLY_MICROBIT_Switch_on_radio='switch on radio';
Blockly.MIXLY_MICROBIT_Switch_off_radio='switch off radio';
Blockly.MIXLY_MICROBIT_Configure_radio='configure radio length %1 queue %2 %3 channel %4 %5 power %6 %7 address %8 %9 group %10 %11 data rate %12 %13';
Blockly.MIXLY_MICROBIT_SPI_INIT='spi initialize (baud rate) %1 bits %2 %3 mode %4 %5 MOSI# %6 %7 MISO# %8 SCK# %9';
Blockly.MIXLY_MICROBIT_Reset_radio='reset radio';
Blockly.MIXLY_MICROBIT_Send_message='send message %1';
Blockly.MIXLY_MICROBIT_Receive_message='receive message';
Blockly.MIXLY_MICROBIT_Say='say %1';
Blockly.MIXLY_MICROBIT_Pronounce='Pronounce %1';
Blockly.MIXLY_MICROBIT_Sing='sing %1';
Blockly.MIXLY_MICROBIT_Pin_touched='pin# %1 touched？';
Blockly.MIXLY_MICROBIT_Read_analog='analog read pin# %1';
Blockly.MIXLY_MICROBIT_Write_analog='analog write pin# %2 to %1';
Blockly.MIXLY_MICROBIT_Read_digital='digital read pin# %1';
Blockly.MIXLY_MICROBIT_Write_digital='digital write pin# %2 to %1';
Blockly.MIXLY_MICROBIT_JS_WAS_GESTURE='on ';
Blockly.MIXLY_MICROBIT_JS_GET = 'get';
Blockly.MIXLY_MICROBIT_JS_GET_GESTURE='get gesture';
Blockly.MIXLY_MICROBIT_JS_CURRENT_GESTURE='current gesture';
Blockly.MIXLY_MICROBIT_JS_GESTURE = 'gesture';
Blockly.MIXLY_MICROBIT_JS_FIELD_STRENGTH='field strength';
Blockly.MIXLY_MICROBIT_JS_IS_COMPASS_CALIBRATED='is compass calibrated';
Blockly.MIXLY_IS_TOUCHED='is touched';
Blockly.MIXLY_WAS_PRESSED='was pressed';
Blockly.MIXLY_GET_PRESSES='get presses';

Blockly.MIXLY_MICROBIT_JS_MONITOR_SCROLL_STRING='scroll string';
Blockly.MIXLY_MICROBIT_PY_ACTUATOR_SPEECH_SAY='speak'
Blockly.MIXLY_MICROBIT_PY_ACTUATOR_SPEECH_SING='sing'
Blockly.MIXLY_MICROBIT_PY_ACTUATOR_SPEECH_PRENOUNCE='read'
//lists
Blockly.Msg.LISTS_NAME_TOOLTIP= 'input list name';
Blockly.blockpy_LIST_ADD_LIST = 'add list';
Blockly.Msg.blockpy_LISTS_CREATE_WITH_INPUT_WITH = 'initialization list';
Blockly.MIXLY_blockpy_TOOLTIP_LISTS_CREATE_WITH_TEXT= 'creates a list through a string. ';
Blockly.Msg.blockpy_LISTS_CREATE_WITH_TOOLTIP= "create a list of any number of items." ;
Blockly.blockpy_MIXLY_SPLITBYDOU = 'create list';
Blockly.Msg.blockpy_LISTS_LENGTH_TOOLTIP = "return the length of the list." ;
Blockly.blockpy_LANG_LISTS_GET_INDEX_TOOLTIP = 'return the value of the specified location in the list. ';
Blockly.blockpy_LANG_LISTS_SET_INDEX_TOOLTIP = 'set the value of the location specified in the list. ';
Blockly.Msg.LISTS_GET_INDEX_RANDOM2 = "random fetch list";
Blockly.Msg.LISTS_GET_INDEX_RANDOM3 = "one of";

Blockly.Msg.MATH_ZHENGCHU_SYMBOL = "//";
Blockly.MIXLY_MICROBIT_JS_PERIOD_MIL='The period (milliseconds) is set to';
Blockly.MIXLY_TOOLTIP_INOUT_ANALOG_WRITE_PY='Sets the value of the specified pin(0~1023)';

Blockly.Msg.LISTS_ISEMPTY_TITLE='Is it empty?';
Blockly.Msg.LISTS_SORT_TITLE ='List sort %1 %2 %3';
Blockly.Msg.LISTS_SORT_TYPE_NUMERIC ='By number';
Blockly.Msg.LISTS_SORT_TYPE_TEXT ='Alphabetical';
Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE ='By letter (ignored)';
Blockly.Msg.LISTS_SORT_ORDER_ASCENDING='Ascending';
Blockly.Msg.LISTS_SORT_ORDER_DESCENDING='Descending';
Blockly.Msg.DISPLAY_IMAGE_LET='Image';
Blockly.Msg.DISPLAY_IMAGE_LET2='towards';
Blockly.Msg.DISPLAY_IMAGE_SHIFT='translation';
Blockly.Msg.DISPLAY_IMAGE_UNIT='Unit';

Blockly.LANG_MATH_RANDOM_FLOAT_INPUT_FROM ='Random decimal';
Blockly.LANG_MATH_RANDOM_FLOAT_INPUT_TO ='reach';
Blockly.LANG_MATH_RANDOM_FLOAT_TOOLTIP2 ='A random number that returns between two numbers (containing)';

Blockly.MICROBIT_SPEECH_pitch ='pitch';
Blockly.MICROBIT_SPEECH_speed ='speed';
Blockly.MICROBIT_SPEECH_mouth ='Mouth';
Blockly.MICROBIT_SPEECH_throat ='throat';
Blockly.MICROBIT_SPEECH_translation ='Translation to phonetics';

Blockly.MICROBIT_ACTUATOR_bpm ='bpm';
Blockly.MICROBIT_ACTUATOR_ticks ='ticks';

Blockly.MICROBIT_PYTHON_TYPE = 'get type';
Blockly.MICROBIT_LOGIC_IS_IN = 'is in';
Blockly.Msg.CONTROLS_FOREACH_INPUT = "for each";

Blockly.MICROBIT_DISPLAY_UNION = 'union';
Blockly.MICROBIT_DISPLAY_INTERSECTION = 'intersection';
Blockly.MICROBIT_DISPLAY_MINUS = 'minus';
Blockly.MICROBIT_DISPLAY_MERGE_SHAPE = 'merge shape';
Blockly.Msg.DICTS_CREATE_EMPTY_TITLE = "initialization to an empty dictionary";
Blockly.Msg.DICTS_CREATE_EMPTY_TOOLTIP = "return an empty dictionary with a length of 0 and does not contain any data";
Blockly.Msg.DICTS_CREATE_WITH_CONTAINER_TITLE_ADD = "dictionary";
Blockly.Msg.DICTS_CREATE_WITH_CONTAINER_TOOLTIP = "Add, delete, or rearrange parts to reconfigure the dictionary block.";
Blockly.Msg.DICTS_CREATE_WITH_INPUT_WITH = "initialize the dictionary as";
Blockly.Msg.DICTS_CREATE_WITH_ITEM_TITLE = "item"
Blockly.Msg.DICTS_CREATE_WITH_ITEM_TOOLTIP = "Add an item to the dictionary.";
Blockly.Msg.DICTS_CREATE_WITH_TOOLTIP = "Create a dictionary with any number of items.";
Blockly.Msg.DICTS_CREATE_WITH_ITEM_KEY= "key"
Blockly.Msg.DICT_KEYS = "get all key values";
Blockly.Msg.DICTS_KEYS_TOOLTIP = "Return a list, including all the keys of a dictionary.";
Blockly.Msg.DICTS_GET_FROM_DICTS = "from the dictionary";
Blockly.Msg.DICTS_GET_IN = "get key values";
Blockly.Msg.DICTS_GET_VALUE = "corresponding value";
Blockly.Msg.DICTS_GET_TOOLTIP = "access the corresponding value of a key in the dictionary";
Blockly.Msg.DICTS_ADD_in_DICT = "in dictionary";
Blockly.Msg.DICTS_ADD = "add or modify a clause, key value";
Blockly.Msg.DICTS_ADD_VALUE = "corresponding value";
Blockly.Msg.DICTS_ADD_OR_CHANGE_TOOLTIP = "add or delete entries in a clause";
Blockly.Msg.DICTS_DELETE_IN = "delete clause, key value";
Blockly.Msg.DICTS_DELETE_VALUE = "and corresponding value";
Blockly.Msg.DICTS_DELETE_TOOLTIP = "Delete a clause in the dictionary";
Blockly.Msg.DICT_CLEAR = "clear dictionary";
Blockly.Msg.DICT_ITEMS = "transform dictionary to a list";
Blockly.Msg.DICTS_ITEMS_TOOLTIP = "Return a list, including all the keys and corresponding values that a dictionary can be traversed";
Blockly.Msg.DICT_VALUES = "get the values corresponding to all keys";
Blockly.Msg.DICTS_VALUES_TOOLTIP = "Return a list, including the corresponding values of all the keys in a dictionary";
Blockly.Msg.DICTS_LENGTH_TOOLTIP = "Return the length of the dictionary, the number of the keys";
Blockly.Msg.DICT_DELDICT = "delete dictionary";
Blockly.Msg.OBJECT_DELETE = "delete list/tuple/dict/set";
Blockly.Msg.MATH_BIN='binary';
Blockly.Msg.MATH_OCT='octal';
Blockly.Msg.MATH_DEC='decimal';
Blockly.Msg.MATH_HEX='hex';

Blockly.MIXLY_MICROBIT_TYPE_INT = 'Integer';
Blockly.MIXLY_MICROBIT_TYPE_FLOAT = 'float';
Blockly.MIXLY_MICROBIT_TYPE_STRING = "string";
Blockly.MIXLY_MICROBIT_TYPE_LIST = "list";
Blockly.MIXLY_MICROBIT_TYPE_TUPLE = "tuple";
Blockly.MIXLY_MICROBIT_TYPE_DICT = "dictionary";
Blockly.MIXLY_MICROBIT_TYPE_SETS = "set";
Blockly.MIXLY_MICROBIT_TYPE_IMAGE = "image";

Blockly.MIXLY_MICROBIT_PY_STORAGE_OPEN_FILE = "open file";
Blockly.MIXLY_MICROBIT_PY_STORAGE_MODE = "mode";
Blockly.MIXLY_MICROBIT_PY_STORAGE_READ = "read"
Blockly.MIXLY_MICROBIT_PY_STORAGE_WRITE = "write"
Blockly.MIXLY_MICROBIT_PY_STORAGE_BIT_READ = "bit read";
Blockly.MIXLY_MICROBIT_PY_STORAGE_BIT_WRITE = "bit write";
Blockly.MIXLY_MICROBIT_PY_STORAGE_AS = "as";
Blockly.MIXLY_MICROBIT_PY_STORAGE_MAKE = "make";
Blockly.MIXLY_MICROBIT_PY_STORAGE_FILE_WRITE = "write in file";


Blockly.MIXLY_MICROBIT_PY_STORAGE_FROM_FILE = 'from file';
Blockly.MIXLY_MICROBIT_PY_STORAGE_NO_MORE_THAN_SIZE = "read content, no more than";
Blockly.MIXLY_MICROBIT_PY_STORAGE_ONE_LINE_NO_MORE_THAN_SIZE = "read in a line, no more than"
Blockly.MIXLY_MICROBIT_PY_STORAGE_CHARACTER = "character";
Blockly.MIXLY_MICROBIT_PY_STORAGE_FILE = "file";
Blockly.MIXLY_MICROBIT_PY_STORAGE_CAN_WRITE_ORNOT = "writable or not";
Blockly.MIXLY_MICROBIT_PY_STORAGE_GET = "get";
Blockly.MIXLY_MICROBIT_PY_STORAGE_FILENAME = "filename";
Blockly.MIXLY_MICROBIT_PY_STORAGE_CLOSE_FILE = "close file";
Blockly.MIXLY_MICROBIT_PY_STORAGE_LIST_ALL_FILES = "list all files";
Blockly.MIXLY_MICROBIT_PY_STORAGE_DELETE_FILE = "delete file";
Blockly.MIXLY_MICROBIT_PY_STORAGE_GET_FILE_SIZE = "get fill";
Blockly.MIXLY_MICROBIT_PY_STORAGE_SIZE = "size";

Blockly.MIXLY_MICROBIT_PY_CONTORL_GET_TYPE = "data type";
Blockly.MIXLY_MICROBIT_PY_CONTORL_UNAME = "current system information";

Blockly.MIXLY_MICROBIT_SHOW_STRING = " %1 delay %2 millisecond %3 wait %4 %5 loop %6 %7 clear %8";
Blockly.MIXLY_MICROBIT_Scroll_string = "scroll display string %1 delay %2 millisecond %3 wait %4 %5 loop %6 %7 clear %8";

Blockly.MIXLY_COMMUNICATION_RFID_INITIAL = "initialize rfid as";
Blockly.MIXLY_COMMUNICATION_RFID_ON_DETECTED = "on signal detected";
Blockly.MIXLY_COMMUNICATION_RFID_READ_CARDNUM = "card number read by rfid";
Blockly.MIXLY_COMMUNICATION_RFID_READ_CARDNUM_IS = "card numbers detected by RFID is";
Blockly.MIXLY_COMMUNICATION_RFID_WRITE = "RFID write card";
Blockly.MIXLY_COMMUNICATION_DATA_BLOCK = "data block";
Blockly.MIXLY_COMMUNICATION_WRITE_NUM = "write data";
Blockly.MIXLY_MICROBIT_PY_COMMUNICATE_WIFI = "wireless";
Blockly.MIXLY_MICROBIT_PY_COMMUNICATE_ON = "on";
Blockly.MIXLY_MICROBIT_PY_COMMUNICATE_OFF = "off";
Blockly.MIXLY_COMMUNICATION_RFID_TOOLTIP = "This is RFID's reading card";
Blockly.MIXLY_COMMUNICATION_RFID_READ = "RFID read";
Blockly.MIXLY_COMMUNICATION_DATA_FROM = "data from";
Blockly.MIXLY_COMMUNICATION_RFID_OFF = "rfid stop detection";
Blockly.MIXLY_MICROBIT_PY_COMMUNICATE_RESET = "reset";
//mixpy
Blockly.blockpy_inout_input='Receive input';
Blockly.blockpy_inout_raw_input='Receive string input';
Blockly.blockpy_inout_print='Print';
Blockly.Msg.INOUT_input_TOOLTIP='Receive keyboard input, end of carriage return, prompt prompt is provided to the user';
Blockly.Msg.INOUT_raw_input_TOOLTIP='Receive keyboard input in string format, end of carriage return, prompt is input prompt for user';
Blockly.blockpy_turtle_create='Create Tortoise';
Blockly.blockpy_turtle_create_TOOLTIP='Create a new turtle';
Blockly.blockpy_forward='Forward';
Blockly.blockpy_backward='Backward';
Blockly.blockpy_turtle_move_num='steps';
Blockly.blockpy_turtle_move='Move';
Blockly.MIXLY_TOOLTIP_TURTEL_FORWARD='Command Turtle Moves Forward';
Blockly.MIXLY_TOOLTIP_TURTEL_BACKWARD='Command turtle to move backwards';
Blockly.blockpy_left='Left';
Blockly.blockpy_right='right';
Blockly.blockpy_turtle_rotate_num='angle';
Blockly.blockpy_turtle_rotate='rotate';
Blockly.MIXLY_TOOLTIP_TURTEL_LEFT='Command Tortoise Rotates Left';
Blockly.MIXLY_TOOLTIP_TURTEL_RIGHT='Command Tortoise Rotates Right';
Blockly.blockpy_setheading='Orientation';
Blockly.blockpy_setheading_degree='degree';
Blockly.blockpy_time_time='timestamp of current time';
Blockly.Msg.blockpy_SET_CREATE_WITH_TOOLTIP = "Create a collection with any number of elements.";
Blockly.Msg.blockpy_SET_CREATE_EMPTY_TITLE = "Initialize to empty collection";
Blockly.Msg.blockpy_SET_CREATE_WITH_INPUT_WITH = 'Initial collection is';
Blockly.Msg.blockpy_SET_CREATE_WITH_CONTAINER_TITLE_ADD = "set";
Blockly.Msg.blockpy_SET_CREATE_WITH_CONTAINER_TOOLTIP = "Add, delete, or rearrange parts to reconfigure this collection block.";
Blockly.Msg.blockpy_SET_VARIABLES_NAME = "Elements";
Blockly.Msg.blockpy_SET_CREATE_WITH_ITEM_TOOLTIP = "Add an element to the collection.";
Blockly.Msg.SET_LENGTH_TOOLTIP = "return the number of elements in the collection.";
Blockly.Msg.SET_CLEAR = "Empty all elements in the collection";
Blockly.Msg.LISTS_TO_SET = "convert to collection";
Blockly.blockpy_USE_LIST='will list';
Blockly.Msg.LISTS_TO_SET_TOOLTIP = "Create a collection from a list";
Blockly.blockpy_set_union='consolidation';
Blockly.blockpy_set_intersection='Intersection';
Blockly.blockpy_set_difference='difference';
Blockly.blockpy_set='collection';
Blockly.blockpy_and_set='and collection';
Blockly.blockpy_set_get_operate='Fetch';
Blockly.MIXLY_TOOLTIP_SET_UNION = 'return the union of two collections';
Blockly.MIXLY_TOOLTIP_SET_INTERSECTION= 'Return the intersection of two sets';
Blockly.MIXLY_TOOLTIP_SET_DIFFERENCE= 'returns the difference of two sets';
Blockly.MIXLY_blockpy_set_add='Add';
Blockly.Msg.SET_ADD_TOOLTIP = "Add an element to the collection. If this element is already in the collection, it has no effect.";
Blockly.MIXLY_blockpy_set_discard='Remove';
Blockly.Msg.SET_DISCARD_TOOLTIP = "Remove an element from the collection. If this element is not in the collection, it has no effect.";
Blockly.blockpy_set_update='and update';
Blockly.MIXLY_TOOLTIP_SET_UPDATE = 'take the union of two sets and assign it to the previous set';
Blockly.MIXLY_TOOLTIP_SET_INTERSECTION_UPDATE = 'take the intersection of two sets, and assign to the previous set';
Blockly.MIXLY_TOOLTIP_SET_DIFFERENCE_UPDATE = 'take the difference of two sets, and assign to the previous set';
Blockly.blockpy_set_of="'s";
Blockly.blockpy_is_set = 'is a collection';
Blockly.blockpy_set_sub='Subset';
Blockly.blockpy_set_super = 'superset';
Blockly.MIXLY_TOOLTIP_SET_SUB = 'to determine whether the previous set is a subset of the next set, return Boolean value';
Blockly.MIXLY_TOOLTIP_SET_SUPER = 'to determine whether the previous set is a superset of the next set, return boolean';
Blockly.blockpy_turtle_clear='Clear screen';
Blockly.blockpy_turtle_reset='Reset';
Blockly.blockpy_turtle_home='Back to origin';
Blockly.blockpy_turtle_drawing='Trail';
Blockly.MIXLY_TOOLTIP_TURTEL_CLEAR='Clear all traces of the turtle, turtle position and status unchanged';
Blockly.MIXLY_TOOLTIP_TURTEL_RESET='Clear all traces of the turtle, Tortoise state reset to initial state';
Blockly.MIXLY_TOOLTIP_TURTEL_HOME='The turtle returned to the origin and restored to its original state, the trace remains unchanged';
Blockly.blockpy_turtle_penup='Pick up';
Blockly.blockpy_turtle_pendown='drop pen';
Blockly.blockpy_turtle_blank=' ';
Blockly.MIXLY_TOOLTIP_TURTEL_PENUP='Put the pen, the turtle will not leave traces when moving';
Blockly.MIXLY_TOOLTIP_TURTEL_PENDOWN='pen down, the turtle will leave a trail when moving';
Blockly.blockpy_turtle_size='thickness';
Blockly.blockpy_turtle_speed='Speed';
Blockly.blockpy_turtle_set='Set brush';
Blockly.blockpy_turtle_set_num='yes';
Blockly.MIXLY_TOOLTIP_TURTEL_SIZE='Set the thickness of turtle traces';
Blockly.MIXLY_TOOLTIP_TURTEL_SPEED="Set the turtle''s movement speed when painting";
Blockly.blockpy_turtle_circle='Circle';
Blockly.blockpy_turtle_dot='point';
Blockly.blockpy_turtle_draw='Draw Graph';
Blockly.blockpy_turtle_radius='Radius';
Blockly.MIXLY_TOOLTIP_TURTEL_CIRCLE='Draw a hollow circle';
Blockly.MIXLY_TOOLTIP_TURTEL_DOT='Draw a Solid Dot';
Blockly.blockpy_turtle_show='Show turtle';
Blockly.blockpy_turtle_hide='Hidden Tortoise';
Blockly.MIXLY_TOOLTIP_TURTEL_SHOW='Show turtles as arrows';
Blockly.MIXLY_TOOLTIP_TURTEL_HIDE='Hidden arrow indicating turtle';
Blockly.blockpy_turtle_goto='Move to coordinate x';
Blockly.blockpy_turtle_goto_y='y';
Blockly.blockpy_turtle_goto_position='Location';
Blockly.blockpy_turtle_setx='x';
Blockly.blockpy_turtle_sety='y';
Blockly.MIXLY_TOOLTIP_TURTEL_SETX='Turtle moves horizontally to a given coordinate position';
Blockly.MIXLY_TOOLTIP_TURTEL_SETY='Turtle moves vertically to a given coordinate position';
Blockly.blockpy_turtle_setxy='Settings';
Blockly.blockpy_turtle_setxy_num='Coordinates';
Blockly.blockpy_turtle_bgcolor='Set Background Color';
Blockly.blockpy_turtle_pencolor='Set brush color';
Blockly.blockpy_turtle_fillcolor='Set brush fill color';
Blockly.Msg.TUPLE_CREATE_WITH_TOOLTIP = "Create a tuple with any number of items.";
Blockly.Msg.TUPLE_CREATE_EMPTY_TITLE = "Initialize to empty tuple";
Blockly.Msg.TUPLE_CREATE_WITH_INPUT_WITH = "initial tuple";
Blockly.Msg.TUPLE_CREATE_WITH_CONTAINER_TITLE_ADD = "Tuple";
Blockly.Msg.TUPLE_CREATE_WITH_CONTAINER_TOOLTIP = "Add, delete, or rearrange parts to reconfigure this tuple block.";
Blockly.Msg.TUPLE_CREATE_WITH_ITEM_TOOLTIP = "Add an element to an element.";
Blockly.TUPLE_GET_INDEX_TOOLTIP = 'Return the value of the specified position in the tuple. ';
Blockly.Msg.TUPLE_LENGTH_TOOLTIP = "return the length of the tuple.";
Blockly.Msg.TUPLE_DEL = "Delete tuple";
Blockly.Msg.TUPLE_JOIN = "Connect";
Blockly.Msg.TUPLE_JOIN_TOOLTIP = "Connect two tuples to form a new tuple.";
Blockly.Msg.LISTS_TO_TUPLE = "Convert to tuple";
Blockly.Msg.LISTS_TO_TUPLE_TOOLTIP = "Create tuples from the list";
Blockly.blockpy_TUPLE_MAX = 'Maximum';
Blockly.blockpy_TUPLE_MIN = 'Minimum';
Blockly.MIXLY_TOOLTIP_TUPLE_MAX = 'Get the Maximum from the tuple';
Blockly.MIXLY_TOOLTIP_TUPLE_MIN = 'Get the Maximum from the tuple';
Blockly.blockpy_TUPLE_GET = 'Get';
Blockly.blockpy_turtle_set_size = 'Set the brush size';
Blockly.blockpy_turtle_set_speed = 'Set the brush speed';
Blockly.blockpy_inout_print_inline='print';
Blockly.Msg.TEXT_PRINT_INLINE_TOOLTIP = "print text or number。";
Blockly.MICROPYTHON_TOOLTIP_LISTS_CREATE_WITH_TEXT = "create list from string。";
Blockly.MIXPY_TOOLTIP_TUPLE_CREATE_WITH_TEXT = "create tuple from string。";
Blockly.blockpy_MIXLY_TUPLE_CREATE='create tuple';
Blockly.Msg.TURTLE_CLONE = "clone turtle";
Blockly.Msg.TURTLE_CLONE_TOOLTIP = "clone a turtle。";
Blockly.blockpy_turtle_angle = 'angle';
Blockly.blockpy_turtle_beginfill='begin fill';
Blockly.blockpy_turtle_endfill='end fill';
Blockly.MIXLY_TOOLTIP_TURTEL_BEGINFILL = 'turtle begin fill';
Blockly.MIXLY_TOOLTIP_TURTEL_ENDFILL = 'turtle end fill';
Blockly.blockpy_USE_TUPLE='change tuple';
Blockly.Msg.TUPLE_TO_LISTS = "into list";
Blockly.Msg.LISTS_TO_TUPLE_TOOLTIP = "change tuple into list";
Blockly.Msg.BLOCKPY_PRINT_TOOLTIP= "print text or number with return。";
Blockly.MIXLY_TOOLTIP_TUPLE_MAX = 'return the maximum value of the elements in the tuple';
Blockly.MIXLY_TOOLTIP_TUPLE_MIN = 'return the minimum value of an element in a tuple';
Blockly.MIXLY_DE= "'s";
Blockly.MIXLY_UPDATE='update';
Blockly.Msg.MIXLY_LIST_LEN='length';
Blockly.Msg.MIXLY_LIST_COUNT='count';
Blockly.Msg.MIXLY_LIST_INDEX='index';
Blockly.Msg.A_TO_B='into';

Blockly.MIXLY_MICROBIT_TYPE_NONE = "NONE";
Blockly.MIXLY_MICROBIT_WAIT = 'wait';
Blockly.MIXLY_MICROBIT_RANDOM = 'random';

Blockly.Msg.TUPLE_TO_SET = "Convert tuples to collections";
Blockly.Msg.TUPLE_TO_LISTS = "Convert tuples to a list";
Blockly.Msg.SET_TO_TUPLE = "Convert the collection to a tuple";
Blockly.Msg.SET_TO_LISTS = "Convert collections to lists";
Blockly.Msg.MATH_BA ="put";
Blockly.Msg.MATH_JinZhi= "Dead";
Blockly.Msg.MATH_ZHW = "Convert to";
Blockly.Msg.MATH_Before_two="binary number converted to";
Blockly.Msg.MATH_Before_eight="converted to octal number";
Blockly.Msg.MATH_Before_ten="decimal number converted to";
Blockly.Msg.MATH_Before_sixteen="Convert hexadecimal number to";
Blockly.Msg.MATH_Behind_two="binary number";
Blockly.Msg.MATH_Behind_eight="octal number";
Blockly.Msg.MATH_Behind_ten="decimal number";
Blockly.Msg.MATH_Behind_sixteen="hexadecimal number";
Blockly.MIXLY_TOOLTIP_sensor_pin_pressed="Return pin is touched";
Blockly.MIXLY_TOOLTIP_INOUT_ANALOG_WRITE_SET="Set Pin Period";
Blockly.MICROBIT_controls_TypeLists="return data type";
Blockly.Msg_IN="If the element (x) returns true in the sequence";
Blockly.Msg.MATH_TWO='two';
Blockly.Msg.MATH_TEN='Ten';
Blockly.Msg.MATH_EIGHT='eight';
Blockly.Msg.MATH_SIXTEEN='16';
Blockly.Msg.TEXT_GET_INDEX_RANDOM="random";
Blockly.Msg._GET_TEXT_SUBLIST_TOOLTIP = "Return the specified part of the string.";
Blockly.MIXLY_TOOLTIP_TEXT_LENGTH="Get string length";
Blockly.MIXLY_SENOR_IS_PRESSED="The button is pressed to return true";
Blockly.MIXLY_SENOR_WAS_PRESSED="Button is pressed back to true";
Blockly.MIXLY_MICROBIT_JS_CURRENT="When";
Blockly.MIXLY_MICROBIT_JS_STATE="Status is";
Blockly.MIXLY_MICROBIT_PERFORMANCE="Execute some statements";
Blockly.MIXLY_MICROBIT_JS_IS_COMPASS_CALIBRATED1="Return true if the compass has been corrected";
Blockly.MIXLY_MICROBIT_JS_SET_TEMPO1="Set the resolution and speed of the rhythm";
Blockly.MIXLY_MICROBIT_PY_ACTUATOR_SPEECH="By the specified music attribute";
Blockly.MIXLY_MICROBIT_Play_notes1="Playing a note list";
Blockly.MIXLY_MICROBIT_Play_built_in_melody1="Play built-in music";
Blockly.MIXLY_MICROBIT_Copy_image1="Copy Image";
Blockly.Msg.DISPLAY_IMAGE_LET3="Pan specified units";
Blockly.MIXLY_MICROBIT_image_add="Merge two images";
Blockly.MIXLY_MICROBIT_image_reduce="Remove image 2 from image 1";
Blockly.MIXLY_MICROBIT_Create_image1="Create Image";
Blockly.MIXLY_MICROBIT_Invert_image1="Reverse Display Image";
Blockly.MIXLY_MICROBIT_Display_is_on1="return true if the display is already open";
Blockly.MIXLY_MICROBIT_JS_MONITOR_SHOW_delay="at specified intervals";
Blockly.MIXLY_MICROBIT_Animate_images1 = "Animated Display Image";
Blockly.MIXLY_MICROBIT_JS_MONITOR_BRIGHTNESS1 = "Get the brightness of the point (x, y)";
Blockly.MIXLY_MICROBIT_JS_MONITOR_BRIGHTNESS2 = "Set the brightness of the point (x, y)";
Blockly.MIXLY_MICROBIT_Built_in_image1 = "Built-in picture";
Blockly.MIXLY_RGB_PIN_COUNT = "Set RGB string, number of lights";
Blockly.MIXLY_RGB_NUM_R_G_B = "Set RGB light, R value, B value, G value";
Blockly.MIXLY_MICROBIT_JS_SERIAL_READ_LINE1 = "Return a string of strings in the serial port";
Blockly.MIXLY_SERIAL_AVAILABLE1 = "If the data in the serial port is readable, return true";
Blockly.MIXLY_SERIAL_softserial = "Initialize serial input, output, baud rate";
Blockly.MIXLY_MICROBIT_Configure_radio1 = 'Configure wireless information length, maximum number of queues, channel, broadcast power, data rate';
Blockly.MIXLY_MICROBIT_Send_message1 = "Wireless Send String";
Blockly.MIXLY_MICROBIT_JS_I2C_READ = "Set the address of i2c to read the number, the number of bytes";
Blockly.MIXLY_MICROBIT_JS_I2C_WRITE = "Set the address of the i2c write number, value";
Blockly.Msg.TEXT_PRINT_Huanhang_TOOLTIP = "Automatic Wrap";
Blockly.MIXLY_MICROBIT_Shiliang_Direction="x,y,z vector and direction";
Blockly.MIXLY_MICROBIT_Direction="direction";
Blockly.MIXLY_MICROBIT_JS_ACCELERATION1="Acceleration (mg)";
Blockly.MIXLY_MIX1="Year/Month/Day";
Blockly.MIXLY_MIX2="hours/minutes/seconds";
Blockly.MIXLY_LCD_PRINT3="On the xth line of the LCD, the y column prints the string";
Blockly.MIXLY_LCD_PRINT4="Print the string on the first and second lines of the LCD";
Blockly.MIXLY_USE="to";
Blockly.MIXLY_BELONG=""
Blockly.MIXLY_MICROBIT_PY_STORAGE_CAN_WRITE_ORNOT1="If the file is writable, it returns true, otherwise it returns false";
Blockly.MIXLY_MICROBIT_PY_STORAGE_GET_FILENAME="Get file name";
Blockly.MIXLY_MICROBIT_IMAGE="image";
Blockly.MIXLY_MICROBIT_Reset_COMPASS="Restore Compass Initial Settings";
Blockly.blockpy_turtle_pencolor_hex='Set the brush color to hex';
Blockly.blockpy_turtle_fillcolor_hex='Set the brush fill color to hex';
Blockly.blockpy_SET_GET_AND_REMOVE_LAST='Get and delete one random item in the collection';
Blockly.MIXLY_blockpy_set_update='Split increase';
Blockly.Msg.SET_TO_LISTS_TOOLTIP = "Convert the collection to a list";
Blockly.blockpy_set_add_update='Split increase list/string';
Blockly.blockpy_USE_SET = 'will set';
Blockly.Msg.SET_TO_LIST = "Convert to list";
Blockly.Msg.DICTS_ADD_OR_CHANGE = "Add or Modify to";
Blockly.MIXLY_TOOLTIP_LISTS_CREATE_WITH_TEXT2='Create or modify a list. ';
Blockly.Msg.PYTHON_LISTS_GET_SUBLIST_TOOLTIP = "Copy the part specified in the list.";
Blockly.Msg.SET_UPDATE_TOOLTIP = "Split and add the contents of the list or string to the collection.";
Blockly.Msg.SET_POP_TOOLTIP = "Get and delete an item from the collection.";
Blockly.Msg.DICT_LENGTH_TOOLTIP = "Returns the number of keys in the dictionary.";
Blockly.Msg.DICTS_CLEAR_TOOLTIP = "Convert the dictionary to an empty dictionary, retain the variables.";
Blockly.Msg.DICTS_DEL_TOOLTIP = "Please empty the dictionary and delete the variable corresponding to the dictionary.";
Blockly.Msg.LISTS_INDEX_FROM_START_TOOLTIP = "%1 is the first item";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM = "Returns the item at the specified location in the list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Return a random item in the list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM = "Get and remove items from the specified location in the list.";
Blockly.MIXLY_PIN="Pin";
Blockly.MIXLY_Digital_PINMODEIN="Digital Input";
Blockly.MIXLY_Digital_PINMODEOUT="Digital Output";
Blockly.MIXLY_Analog_PINMODEIN="Analog Input";
Blockly.MIXLY_Analog_PINMODEOUT="Analog Output";
Blockly.MIXLY_Second="second";
Blockly.MIXLY_mSecond="ms";
Blockly.MIXLY_uSecond="us";
Blockly.MIXLY_TOOLTIP_INOUT_ANALOG_WRITE_SET_FREQ="Set pin analog output frequency";
Blockly.MIXLY_TOOLTIP_CHAOSHENGBO='ultrasonic ranging (cm): trigger connector pin 15, echo connector pin 14, sclk connector pin 13';
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Get and remove random items from the list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_INSERT = "Insert the item at the specified position in the list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_CHANGE = "Modify the item at the specified location in the list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_DELETE = "Remove items from the specified location in the list.";
Blockly.blockpy_turtle_shape = 'The shape is set to';
Blockly.blockpy_turtle_shape_arrow = 'arrow';
Blockly.blockpy_turtle_shape_turtle = 'Turtle';
Blockly.blockpy_turtle_shape_square = 'square';
Blockly.blockpy_turtle_shape_triangle = 'Triangle';
Blockly.blockpy_turtle_shape_circle = 'circle';
Blockly.blockpy_turtle_shape_classic = 'default';
Blockly.blockpy_turtle_write='Write';
Blockly.Msg.TURTLE_SHAPE_TOOLTIP = "Set the shape of the turtle, optional shapes include circles, triangles, squares, turtles, arrows and defaults.";
Blockly.Msg.TURTLE_WRITE_TOOLTIP = "Make the turtle write the specified text at the current position on the canvas.";
Blockly.Msg.LISTS_EXTEND_TOOLTIP = "Add the next list to the end of the previous list.";
Blockly.MIXLY_MICROBIT_LIST_A_VALUE='a value';
Blockly.MIXLY_MICROBIT_LIST_A_ITEM='an item';
Blockly.MIXLY_MICROBIT_LIST_ASSIGN_AT='assign at';
Blockly.MIXLY_MICROBIT_LIST_EXTEND='extend';
Blockly.MIXLY_MICROBIT_LIST_POP='pop #';
Blockly.Msg.TURTLE_POS = "Get the current position of the turtle";
Blockly.MIXLY_TOOLTIP_TURTEL_POS="Get the turtle's current position and return a tuple containing the current position x and y coordinates";
Blockly.Msg.LISTS_CREATE_PYTHON_EMPTY_TITLE = "Initialize to an empty list";
Blockly.Msg.LISTS_CREATE_PYTHON_EMPTY_TOOLTIP = "Return a list with a length of 0 and no data records";
Blockly.Msg.LISTS_CREATE_WITH_PYTHON_TOOLTIP = "Create a list with any number of items.";
Blockly.MIXLY_TOOLTIP_CONVERT_LIST_TO_TUPLE='Convert the list to a tuple. ';
Blockly.MIXLY_TOOLTIP_CONVERT_LIST_TO_SET='Convert the list into a collection. ';
Blockly.LANG_LISTS_REVERSE_TOOLTIP = 'Reverse the order of all items in the list. ';
Blockly.Msg.LISTS_SORT_TOOLTIP = 'Sort all the items in the list in the specified order. ';
Blockly.MIXLY_TOOLTIP_LIST_FIND_INDEX='Returns the position of the specified value in the list, and returns the position of the first value if there are multiple values. ';
Blockly.MIXLY_TOOLTIP_LIST_FIND_COUNT='Returns the number of specified values ​​in the list. ';
Blockly.MIXLY_TOOLTIP_LIST_APPEND='Add the specified value to the end of the list. ';
Blockly.MIXLY_TOOLTIP_LIST_REMOVE='Remove the specified value from the list, delete the first one if there are multiple values ​​in the list, and report an error if the value is not in the list. ';
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT = "Add the specified value to the specified position in the list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_CHANGE = "Modify the value of the specified location in the list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_DELETE = "Remove the value of the specified location in the list.";
Blockly.Msg.DICT_UPDATE = "The corresponding item in the item is added to the dictionary";
Blockly.Msg.MAKE_DICT = "The dictionary";
Blockly.Msg.DICTS_UPDATE_TOOLTIP = "Add all entries in the previous dictionary to the next dictionary, the former remains unchanged.";
Blockly.Msg.DICTS_ADD_TOOLTIP = "Add or modify an entry in the dictionary.";
Blockly.Msg.DICTS_DELETE_TOOLTIP = "Remove entries in the dictionary.";
Blockly.MIXLY_TOOLTIP_TUPLE_FIND_INDEX='Returns the position of the specified value in the tuple, and returns the position of the first value if there are multiple values. ';
Blockly.MIXLY_TOOLTIP_TUPLE_FIND_COUNT='Returns the number of specified values ​​in the tuple. ';
Blockly.Msg.MATH_ONLIST_TOOLTIP_TUPLE_AVERAGE = "Return the average of the values ​​in the tuple.";
Blockly.MIXLY_UART_SETUP="Initialize UART to";
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_GET_TEM_HUM="Return the temperature and humidity measured by the temperature and humidity sensor.";
Blockly.MIXLY_DHT11_T_H="Get temperature and humidity";
Blockly.MIXLY_RECT="Draw a rectangle";
Blockly.MIXLY_RECT_START="starting point";
Blockly.MIXLY_RECT_Fill="fill";
Blockly.MIXLY_MICROBIT_SHOW_RECT = "Start point (x %1 , y %2 ) Width %3 Height %4 %5 Fill %6";
Blockly.MIXLY_MICROBIT_SHOW_LINE = "Line starting point (x %1 , y %2 ) length %3 ";
Blockly.MIXLY_DISPLAY_DRAW="draw";
Blockly.MIXLY_DISPLAY_RLINE="level";
Blockly.MIXLY_DISPLAY_VLINE="vertical";
Blockly.MIXLY_MICROBIT_SHOW_LINE_ARBITRARILY="Draw a line starting point (x1 %1 , y1 %2 ) End point (x2 %3 , y2 %4 ) ";
Blockly.MIXLY_ESP32_Create_image='Create image %1 %2 %3 %4 %5 %6 %7 %8 %9 %10 %11 %12 %13 %14 %15 %16 %17 %18 %19 %20 %21 %22 %23 %24 %25 %26 %27 %28 %29 %30 %31 %32 %33 %34 %35 %36 %37 %38 %39 %40 %41 %42 %43 %44 %45 %46 %47 %48 %49 %50 %51 %52 %53 %54 %55 %56 %57 %58 %59 %60 %61 %62 %63 %64 %65 %66 %67 %68 %69 %70 %71 %72 %73 %74 %75 %76 %77 %78 %79 %80 %81 %82 %83 %84 %85 %86 %87 %88 %89 %90 %91 %92 %93 %94 %95 %96 %97 %98 %99 %100 %101 %102 %103 %104 %105 %106 %107 %108 %109 %110 %111 %112 %113 %114 %115 %116 %117 %118 %119 %120 %121 %122 %123 %124 %125 %126 %127 %128 %129 %130 %131 %132 %133 %134 %135 %136';
Blockly.MIXLY_ESP32_JS_MONITOR_BRIGHTNESS="If the point (x,y) lights up, it returns true";
Blockly.MIXLY_ESP32_JS_MONITOR_GET_POINT="The light is on?";
Blockly.MIXLY_ESP32_JS_MONITOR_SET_BRIGHTNESS="Setting off";
Blockly.MIXLY_ESP32_ON="Bright";
Blockly.MIXLY_ESP32_OFF="Off";
Blockly.MIXLY_ESP32_JS_MONITOR_SET_SCREEN_BRIGHTNESS="Set Screen Brightness";
Blockly.MIXLY_ESP32_JS_MONITOR_GET_SCREEN_BRIGHTNESS="Get screen brightness";
Blockly.MIXLY_ESP32_JS_MONITOR_SET_BLINK_RATE="Set the blinking frequency";
Blockly.MIXLY_NETWORK_INIT="Config wifi";
Blockly.MIXLY_NETWORK_MODE="Set wifi mode to";
Blockly.MIXLY_NETWORK_WIFI_OPEN="Activate";
Blockly.MIXLY_NETWORK_WIFI_CLOSE="Deactivate";
Blockly.MIXLY_NETWORK_WIFI_FLAG="Network Interface";
Blockly.MIXLY_NETWORK_WIFI_SCAN="Scan for available wifi";
Blockly.MIXLY_ESP32_NETWORK_CONNECT="Connect wifi";
Blockly.MIXLY_ESP32_NETWORK_ID="name";
Blockly.MIXLY_ESP32_NETWORK_PASSWORD="Password";
Blockly.MIXLY_NETWORK_WIFI_CONNECT="Connect to wifi?";
Blockly.MIXLY_SYMBOL_QUESTION="?";
Blockly.MIXLY_ESP32_NETWORK_GET_CONNECT="Get wifi";
Blockly.MIXLY_ESP32_NETWORK_IP="IP address";
Blockly.MIXLY_ESP32_NETWORK_MASK="subnet mask";
Blockly.MIXLY_ESP32_NETWORK_GATEWAY="Gateway";
Blockly.MIXLY_ESP32_NETWORK_STOP_CONNECT="Disconnect wifi";
Blockly.MIXLY_ESP32_NETWORK_GET_WIFI="Get wifi";
Blockly.MIXLY_NETWORK_WIFI_ESSID="Access Point Name";
Blockly.MIXLY_NETWORK_WIFI_CHANNEL="wifi channel";
Blockly.MIXLY_NETWORK_WIFI_SCAN_ATTRIBUTE="All Features";
Blockly.MIXLY_ESP32_READ_LINE="Read a row";
Blockly.MIXLY_PINMODEPULLDOWN="pull down input";
Blockly.MIXLY_ESP32_BLUETOOTH_SETUP="Initialize Set Bluetooth";
Blockly.MIXLY_ESP32_BLUETOOTH_ADV_MAN="manufacturer name";
Blockly.MIXLY_ESP32_BLUETOOTH_ADV_DEV="Device Name";
Blockly.MIXLY_ESP32_BLUETOOTH_FLAG="broadcast";
Blockly.MIXLY_ESP32_BLUETOOTH_START="Enable";
Blockly.MIXLY_ESP32_BLUETOOTH="Bluetooth";
Blockly.MIXLY_ESP32_BDA="Connect to the remote GATTS server";
Blockly.MIXLY_ESP32_BLUETOOTH_SERVICES="Get existing GATTS service";
Blockly.MIXLY_ESP32_BLUETOOTH_CONNS="Get all current client connections";
Blockly.MIXLY_ESP32_BLUETOOTH_SCANNING="Scan is active?";
Blockly.MIXLY_ESP32_BLUETOOTH_SCAN="Scan";
Blockly.MIXLY_ESP32_SERVICE_SETUP="Create GATTSService";
Blockly.MIXLY_MICROBIT_JS_OLED='OLED';
Blockly.MIXLY_ESP32_CONNECT_ONENET="OneNET Connection";
Blockly.MIXLY_ESP32_ONENET_CLIENT="Device ID";
Blockly.MIXLY_ESP32_ONENET_SERVER="Server Domain Name";
Blockly.MIXLY_ESP32_ONENET_USERNAME="Product ID";
Blockly.MIXLY_ESP32_ONENET_PASSWORD="Product APIKey";
Blockly.MIXLY_ESP32_ONENET_TOPIC="Theme";
Blockly.MIXLY_ESP32_ONENET_SUB="callback function";
Blockly.MIXLY_ESP32_IOT_CONNECT_WIFI="Connect WIFI";
Blockly.MIXLY_ESP32_ONENET_USERNAME="Product ID";
Blockly.MIXLY_ESP32_ONENET_PASSWORD="Product APIKey";
Blockly.MIXLY_ESP32_DISCONNECT_ONENET="OneNET disconnected";
Blockly.MIXLY_ESP32_CHECK_ONENET="Receive and execute OneNET commands";
Blockly.MIXLY_ESP32_PUBLISH_ONENET="Send information to OneNET";
Blockly.MIXLY_ESP32_PUBLISH_ONENET_EMPTY="Send empty information to OneNET";
Blockly.MIXLY_TO_BITES='transfer byte';
Blockly.Msg.MATH_ONLIST_TOOLTIP_TUPLE_MAX = "Return the maximum number in the tuple.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_TUPLE_MEDIAN = "Return the median in the tuple.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_TUPLE_MIN = "Return the minimum number in the tuple.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_TUPLE_MODE = "Return the list of the most common items in the tuple.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_TUPLE_RANDOM = "Return a random element from the tuple.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_TUPLE_STD_DEV = "Return the standard deviation of the tuple.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_TUPLE_SUM = "Return the sum of all numbers in the tuple.。";
Blockly.Msg.TUPLE_DEL_TOOLTIP = "Remove tuple variables and freed storage space for tuple variables.";
Blockly.Msg.PYTHON_TUPLE_GET_SUBLIST_TOOLTIP = "Copy the specified part of the tuple.";
Blockly.MIXLY_ESP32_NETWORK_SERVER1="Config ESP32 as Server";
Blockly.MIXLY_ESP32_NETWORK_SERVER2="Recieve message";
Blockly.MIXLY_MICROBIT_RADIO_SEND="Wireless send";
Blockly.MIXLY_MICROBIT_MSG="Message"
Blockly.MIXLY_MICROBIT_MSG_BYTE="Message as Bytes"
Blockly.MIXLY_MICROBIT_MSG_FULL="(Message,Signal Strength,Timestamp)"
Blockly.blockpy_DICT_POP='Return and delete the key in the dictionary';
Blockly.Msg.DICT_POP_TOOLTIP = "Return and delete the item in the dictionary";
Blockly.Msg.DICTS_DEFAULT_VALUE = "Config default";
Blockly.Msg.DICTS_SET_DEFAULT = "Config key";
Blockly.Msg.DICTS_SETDEFAULT_TOOLTIP = "Add a key and corresponding value in the dictionary, if the same name key in the dictionary is invalid.";
Blockly.Msg.TEXT_TITLE="Uppercase(for first letter of each word)";
Blockly.Msg.TEXT_CAPITALIZE="Uppercase(for first letter of each sentence)";
Blockly.Msg.TEXT_SWAPCASE="swapcase";
Blockly.Msg.TEXT_LOWER="Lowercase";
Blockly.Msg.TEXT_LJUST="Left alignment";
Blockly.Msg.TEXT_CENTER="Middle alignment";
Blockly.Msg.TEXT_RJUST="Right alignment";
Blockly.MIXLY_MIXPY_REPLACE="Replace";
Blockly.Msg.LIST_SPLIT_AS = "As";
Blockly.Msg.LIST_SPLIT = "Split";
Blockly.MIXLY_TOOLTIP_TEXT_SPLIT="Split and return list";

Blockly.Msg.TEXT_STRIM = "Strim";
Blockly.Msg.TEXT_TRIM_BOTH = "Both";
Blockly.Msg.TEXT_TRIM_LEFT = "Left";
Blockly.Msg.TEXT_TRIM_RIGHT = "Right";
Blockly.Msg.TEXT_BLANK = "Space";
Blockly.Msg.TEXT_TRIM_BOTH_TOOLTIP = "Copy the text and delete the extra space at both ends.";
Blockly.Msg.TEXT_TRIM_LEFT_TOOLTIP = "Copy the text while deleting the excess space on the left.";
Blockly.Msg.TEXT_TRIM_RIGHT_TOOLTIP = "Copy the text while deleting the excess space on the Right.";
Blockly.Msg.LIST_EQUAL_DISTANCE = "Equidistant";
Blockly.Msg.MIXLY_LIST_LENGTH="Based On length";
Blockly.blockpy_TURTLE_DONE='Turtle On';
Blockly.blockpy_turtle_bgcolor_hex='Set the background color to sixteen hexadecimal #';
Blockly.MIXLY_TOOLTIP_SERIES_CREATE_FROM_TEXT='Create or modify an series with arrays or dictionaries.';
Blockly.Msg.SERIES_INDEX_VALUE = "Get Series all item";
Blockly.Msg.SERIES_INDEX = "index";
Blockly.Msg.SERIES_VALUE = "value";
Blockly.Msg.SERIES_INDEX_TOOLTIP = "Return all indexes in the serries as list";
Blockly.Msg.SERIES_VALUE_TOOLTIP = "Return all values in the serries as list";
Blockly.blockpy_series_create='Create series';
Blockly.blockpy_series_via = 'By List or dictionary';
Blockly.blockpy_PYLAB_SHOW='Display chart';
Blockly.blockpy_PYLAB_LEGEND='Display Legend';
Blockly.blockpy_PYLAB_TITLE='Set chart title';
Blockly.blockpy_PYLAB_SET_LABEL='Config Chart';
Blockly.blockpy_PYLAB_LABEL='Coordinate description text is';
Blockly.Msg.PYLAB_LABEL_X = "X";
Blockly.Msg.PYLAB_LABEL_Y = "Y";
Blockly.blockpy_series_set_index = 'Index';

Blockly.blockpy_PYLAB_PLOT='Draw a line graph';
Blockly.blockpy_dataframe_create='Create two-dimensional data table';
Blockly.blockpy_dataframe_via = 'By  dictionary';
Blockly.blockpy_dataframe_set_index_column = 'Index column';
Blockly.blockpy_dataframe_set_index_raw = 'Raw column';
Blockly.blockpy_series_create_TOOLTIP='Create a series by dictionary or list, indexed as the default natural number.';
Blockly.blockpy_series_create_index_TOOLTIP='Create a series by dictionary or list, and specify a list as index.';
Blockly.blockpy_dataframe_create_TOOLTIP='Create a two-dimensional table through the dictionary, indexed as the default natural number.';
Blockly.blockpy_dataframe_create_index_TOOLTIP='Create a two-dimensional table through the dictionary and specify the list as rank index.';
Blockly.blockpy_PYLAB_PLOT_LINE='Line Type';
Blockly.blockpy_PYLAB_PLOT_LINE_SOLID='Solid Line';
Blockly.blockpy_PYLAB_PLOT_LINE_DOTTED='Dotted Line';
Blockly.blockpy_PYLAB_PLOT_LINE_CHAIN='Chain Line';
Blockly.blockpy_PYLAB_PLOT_LINE_POINT_DOTTED='Point dotted Line';
Blockly.Msg.COLOUR_CYAN = "Cyan";
Blockly.Msg.COLOUR_MAGENTA = "Magenta";
Blockly.Msg.COLOUR_YELLOW = "Yellow";
Blockly.Msg.COLOUR_BLACK = "Black";
Blockly.Msg.COLOUR_WHITE = "White";
Blockly.blockpy_PYLAB_PLOT_DOT='Dot Type';
Blockly.blockpy_PYLAB_PLOT_DOT_CIRCULAR='Circular';
Blockly.blockpy_PYLAB_PLOT_DOT_LARGE_DOT='Large';
Blockly.blockpy_PYLAB_PLOT_DOT_PIXEL='Pixel Doy';
Blockly.blockpy_PYLAB_PLOT_DOT_TRIANGLE_UP='Triangle Up';
Blockly.blockpy_PYLAB_PLOT_DOT_TRIANGLE_DOWN='Triangle Down';
Blockly.blockpy_PYLAB_PLOT_DOT_TRIANGLE_LEFT='Triangle Left';
Blockly.blockpy_PYLAB_PLOT_DOT_TRIANGLE_RIGHT='Triangle Right';
Blockly.blockpy_PYLAB_PLOT_DOT_TRIMARKER_UP='Trimaker Up';
Blockly.blockpy_PYLAB_PLOT_DOT_TRIMARKER_DOWN='Trimaker Down';
Blockly.blockpy_PYLAB_PLOT_DOT_TRIMARKER_LEFT='Trimaker Left';
Blockly.blockpy_PYLAB_PLOT_DOT_TRIMARKER_RIGHT='Trimaker Right';
Blockly.blockpy_PYLAB_PLOT_DOT_SQUARE='Square';
Blockly.blockpy_PYLAB_PLOT_DOT_PENTAGON='Pentagon';
Blockly.blockpy_PYLAB_PLOT_DOT_STAR='Star';
Blockly.blockpy_PYLAB_PLOT_DOT_HEXAGON_VERTICAL='Hexagon Vertical';
Blockly.blockpy_PYLAB_PLOT_DOT_HEXAGON_HORIZONTAL='Hexagon Horizontal';
Blockly.blockpy_PYLAB_PLOT_DOT_PLUS='Plus';
Blockly.blockpy_PYLAB_PLOT_DOT_CROSS='Cross';
Blockly.blockpy_PYLAB_PLOT_DOT_DIAMOND='Big Diamond';
Blockly.blockpy_PYLAB_PLOT_DOT_DIAMOND_SMALL='Small Diamond';
Blockly.blockpy_PYLAB_PLOT_DOT_VERTICAL='Vertical';
Blockly.blockpy_PYLAB_PLOT_DOT_HORIZONTAL='Horizontal';

Blockly.MIXLY_MICROBIT_JS_I2C="i2c";
Blockly.MIXLY_ESP32_TOUCH="Touch";
Blockly.MIXLY_ESP32_TOUCH_SENSOR="Touch Sensor";
Blockly.MIXLY_ESP32_NEAR="Infrared proximity sensor value";
Blockly.MIXLY_ESP32_INTERRUPT="Interrupt";
Blockly.MIXLY_ESP32_PITCH="Pitch";
Blockly.MIXLY_ESP32_DUTY="Tone";
Blockly.MIXLY_ESP32_LIGHT="Return light value";
Blockly.MIXLY_ESP32_SOUND="Return sound value";
Blockly.MIXLY_ESP32_MONITOR_SCROLL='Scroll';
Blockly.MIXLY_PYTHON_GLOBAL='Global';
Blockly.MIXLY_ESP32_TOGGLE="Toggle";
Blockly.MIXLY_PYTHON_ONE_SHOT="One Shot";
Blockly.MIXLY_PYTHON_PERIODIC="Periodic";
Blockly.MIXLY_RTC_TIME="Config RTC";
Blockly.blockpy_REQUESTS_GET='Initiating get request receive as variable';
Blockly.blockpy_REQUESTS_GET_TOOLTIP='Use HTTP protocol to launch get request to the specified domain name, and assign the response result to the variable.';
Blockly.blockpy_REQUESTS_GET_ATTR_STATUS_CODE='Status Code';
Blockly.blockpy_REQUESTS_GET_ATTR_TEXT='Response content';
Blockly.blockpy_REQUESTS_GET_ATTR_CONTENT='Bin content';
Blockly.blockpy_REQUESTS_GET_ATTR_COOKIES='cookies';
Blockly.blockpy_REQUESTS='Request';
Blockly.blockpy_CONDUCT='Conduct';
Blockly.MIXLY_ESP32_TIME_TICKS_DIFF='Time Diff'
Blockly.MIXLY_ESP32_TIME_MINUS='Minus'
Blockly.MIXLY_ESP32_MACHINE_VALUE='value'
Blockly.MIXLY_ESP32_RGB_WRITE='Affect'
Blockly.MIXLY_GETPRESSURE = 'Return atmospheric pressure';
Blockly.MIXLY_MICROPYTHON_AS = "As";
Blockly.MIXLY_ESP32_ONEWIRE_SCAN = "Scan";
Blockly.MIXLY_ESP32_ONEWIRE_RESET="Reset OneWire";
Blockly.MIXLY_ESP32_ONEWIRE_READ = "Read byte";
Blockly.MIXLY_ESP32_ONEWIRE_INIT = "Init bus";
Blockly.MIXLY_ESP32_ONEWIRE_SELECT = "Config OneWire";
Blockly.MIXLY_ESP32_I2C_SCAN1 = "Scan I2C";
Blockly.MIXLY_ESP32_I2C_SCAN2 = "Devices on Bus";
Blockly.MIXLY_ESP32_SPI_SET = "Config SPI Baudrate";
Blockly.MIXLY_ESP32_SPI_BUFFER = "Buffer";
Blockly.MIXLY_ESP32_SPI_OUTPUT = "OutPut";
Blockly.MIXLY_ESP32_SET = "Create";
Blockly.MIXLY_ESP32_WRITE = "Write";
Blockly.MIXLY_ESP32_BUFFER_READ = "Read into Buffer";
Blockly.MIXLY_ESP32_WNUMBER = "Write address";
Blockly.MIXLY_ESP32_RNUMBER = "Read address";
Blockly.MIXLY_ESP32_READ = "Read";
Blockly.MIXLY_ESP32_SUCCESS = "Success？";
Blockly.MIXLY_ESP32_SPI_INIT = "Init SPI";
Blockly.MIXLY_ESP32_REF_VOLTAGE = "Ref Voltafe";
Blockly.MIXLY_TOOLTIP_DISPLAY_ONOFF='Return Led state';
Blockly.MIXLY_MICROPYTHON_SOCKET_INIT='Socket Init ';
Blockly.MIXLY_MICROPYTHON_SOCKET_TYPE='Socket Type';
Blockly.MIXLY_MICROPYTHON_SOCKET_LISTEN='Socket Listen';
Blockly.MIXLY_MICROPYTHON_SOCKET_QUEUE='Socket Queue';
Blockly.MIXLY_MICROPYTHON_SOCKET_LET_SOCKET='Set Socket';
Blockly.MIXLY_MICROPYTHON_SOCKET_BIND_TO_ADDRESS='Bind to address';
Blockly.MIXLY_MICROPYTHON_SOCKET_ACCEPT='Accept and return Socket';
Blockly.MIXLY_MICROPYTHON_SOCKET_RECEIVE='Socket Recieve';
Blockly.MIXLY_MICROPYTHON_SOCKET_SEND='Send';
Blockly.MIXLY_MICROPYTHON_SOCKET_MAKE = "Set";
Blockly.MIXLY_MICROPYTHON_SOCKET_TO = "To";
Blockly.MIXLY_MICROPYTHON_SOCKET_CLOSE = "Close";
Blockly.MIXLY_ESP32_MONITOR_GET_SCREEN_IMAGE="Return matrix bitmap";
Blockly.MIXLY_ESP32_MONITOR_GET_SCREEN_IMAGE_TOOLTIP="Return matrix bitmap";
Blockly.MIXLY_ESP32_MONITOR_SHOW_STATIC='Display String Static';
Blockly.MIXLY_ESP32_SENOR_GYRO='GYPO(rad/s)';
Blockly.Msg.DATAFRAME_RAW = "Raw";
Blockly.Msg.DATAFRAME_COLUMN = "Column";
Blockly.MIXLY_ESP32_MUSIC_PLAY_LISTS='playlist';
Blockly.MIXLY_ESP32_MUSIC_WAIT='wait';
Blockly.MIXLY_ESP32_MUSIC_LOOP='loop';
Blockly.MIXLY_ESP32_MIXGO_MUSIC_PLAY_TONE='show note';
Blockly.MIXLY_ESP32_MIXGO_MUSIC_SHOW_IN='in';
Blockly.MIXLY_MICROPYTHON_CLEAR ='empty';
Blockly.MIXLY_MICROPYTHON_FORMAT ='format string';
Blockly.MIXLY_SYSTEM_TIME_LOCALTIME='get formatting time ';
Blockly.MIXLY_SYSTEM_TIME_LOCALTIME_ALL='Current time';
Blockly.MIXLY_SYSTEM_TIME_LOCALTIME_YEAR='Current year';
Blockly.MIXLY_SYSTEM_TIME_LOCALTIME_MONTH='Current month';
Blockly.MIXLY_SYSTEM_TIME_LOCALTIME_DATE='Current date';
Blockly.MIXLY_SYSTEM_TIME_LOCALTIME_HOUR='Current hour';
Blockly.MIXLY_SYSTEM_TIME_LOCALTIME_MINUTE='Current minute';
Blockly.MIXLY_SYSTEM_TIME_LOCALTIME_SECOND='Current second';
Blockly.MIXLY_SYSTEM_TIME_LOCALTIME_INWEEK='Today is the day of the week';
Blockly.MIXLY_SYSTEM_TIME_LOCALTIME_INYEAR='The present is the day of the year';
Blockly.MIXLY_SYSTEM_TIME_LOCALTIME_DST='Current daylight saving time marker';
Blockly.MIXLY_TURTLE_SCREEN_DELAY='set the animation interval to ';
Blockly.MIXLY_TOOLTIP_TURTEL_SCREEN_DELAY='set the refresh interval of turtle painting animation to 10 by default, and the smaller the value, the faster the animation will play ';
Blockly.MIXLY_TURTLE_WRITE_MOVE ='brush moves with text ';
Blockly.MIXLY_TURTLE_WRITE_MOVE_TRUE ='True';
Blockly.MIXLY_TURTLE_WRITE_MOVE_FALSE ='False';
Blockly.MIXLY_TURTLE_WRITE_ALIGN ='text alignment ';
Blockly.MIXLY_TURTLE_WRITE_ALIGN_LEFT ='the left';
Blockly.MIXLY_TURTLE_WRITE_ALIGN_CENTER ='centered';
Blockly.MIXLY_TURTLE_WRITE_ALIGN_RIGHT ='the right';
Blockly.MIXLY_TURTLE_WRITE_FONT_NAME ='font';
Blockly.MIXLY_TURTLE_WRITE_FONT_NUM ='name';
Blockly.MIXLY_TURTLE_WRITE_FONT_TYPE ='font';
Blockly.MIXLY_TURTLE_WRITE_FONT_TYPE_NORMAL ='standard';
Blockly.MIXLY_TURTLE_WRITE_FONT_TYPE_BOLD ='bold';
Blockly.MIXLY_TURTLE_WRITE_FONT_TYPE_ITALIC ='tilt';
Blockly.MIXLY_TURTLE_WRITE_FONT_TYPE_BOLD_ITALIC ='slant bold ';
Blockly.MIXLY_ESP32_I2C_INIT ='Initialize I2C, sda as data signal, SCL as clock signal, frequency as data transmission rate is generally 10k or 40k';
Blockly.MIXLY_ESP32_I2C_SCAN ='Search device on I2C bus and return device address ';
Blockly.MIXLY_ESP32_I2C_AVAILABLE ='Judge whether I2C reads data successfully and return true/false ';
Blockly.MIXLY_ESP32_SPI_INIT ='Create SPI objects and set baudrate (clock) polarity (polarity):0/1, (clock) phase :0/1, and clock (SCK), master device output, slave device input (MOSI), master device input, and slave device output (MISO) pins ';
Blockly.MIXLY_ESP32_SPI_SET ='Set SPI baud rate ';
Blockly.MIXLY_ESP32_SPI_BUFFER_SET ='Create a buffer byte stream and set its size ';
Blockly.MIXLY_ESP32_SPI_READ ='Return the bytes read by SPI (number of bytes to be filled in)';
Blockly.MIXLY_ESP32_SPI_READ_OUTPUT ='A certain number of bytes are read and returned when 0xFF is printed on MOSI ';
Blockly.MIXLY_ESP32_SPI_READINTO ='Returns the buffer byte stream read (the length was set when the buffer byte stream was created)';
Blockly.MIXLY_ESP32_SPI_READINTO_OUTPUT ='Reads a given buffer byte stream and outputs 0xff on MOSI ';
Blockly.MIXLY_ESP32_SPI_WRITE ='SPI sends bytes ';
Blockly.MIXLY_ESP32_SPI_WRITE_READINTO ='SPI sends bytes and reads them into the buffer byte stream ';
Blockly.MIXLY_ESP32_OW_INIT ='Create a single-bus protocol on a pin ';
Blockly.MIXLY_ESP32_OW_SCAN ='Return a list of devices on the bus ';
Blockly.MIXLY_ESP32_OW_READ ='Read a byte on the bus ';
Blockly.MIXLY_ESP32_OW_WRITE ='Write a string/byte to the bus ';
Blockly.MIXLY_ESP32_OW_SELECT ='Select a specific device from ROM code ';
Blockly.MIXLY_ESP32_OW_RESET ='Reset bus ';
Blockly.MIXLY_ESP32_LED_SETONOFF ='Set the status of embedded LED lights ';
Blockly.MIXLY_ESP32_LED_GETONOFF ='Get the current status of the embedded LED light ';
Blockly.MIXLY_ESP32_LED_SETBRIGHT ='Get the current brightness of the embedded LED light (0~1023)';
Blockly.MIXLY_ESP32_MUSIC_PLAYSHOW ='Play a list of notes and display corresponding notes ';
Blockly.MIXLY_ESP32_MUSIC_SET_TEMPO ='Set the resolution and speed of playing music ';
Blockly.MIXLY_ESP32_MUSIC_GET_TEMPO ='Get the current rhythm of music ';
Blockly.MIXLY_ESP32_MUSIC_RESET ='Restore music resolution, speed and other initial Settings ';
Blockly.MIXLY_ESP32_MUSIC_WRI ='Make the RGB color light module work ';
Blockly.MIXLY_ESP32_MUSIC_SHOW_STATIC ='Statically displaying strings on screen ';
Blockly.MIXLY_ESP32_DISPLAY_SETPIXEL ='Set the on-off state of LED dot matrix lamp at (x,y) position ';
Blockly.MIXLY_ESP32_SENSOR_LIGHT_LEVEL_TOOLTIP="Set sensor brightness level";
Blockly.MIXLY_ESP32_SENSOR_RTC_INT_TOOLTIP="Initialize the real time clock";
Blockly.MIXLY_ESP32_RTC_SET_DATATIME_TOOLTIP="Set the RTC clock module time";
Blockly.MIXLY_ESP32_NETWORK_INIT_TOOLTIP="Set wifi working mode and initialize wifi";
Blockly.MIXLY_ESP32_NETWORK_OPEN_TOOLTIP="Turn on or disable network connections";
Blockly.MIXLY_ESP32_NETWORK_SCAN_TOOLTIP="Return the connectable wifi address";
Blockly.MIXLY_ESP32_NETWORK_CONNECT_TOOLTIP="Set the wifi name and password";
Blockly.MIXLY_ESP32_NETWORK_WIFI_CONNECT_TOOLTIP="Return true when connected to wifi";
Blockly.MIXLY_ESP32_NETWORK_GET_CONNECT_TOOLTIP="Return the address of the connected wifi";
Blockly.MIXLY_ESP32_NETWORK_STOP_TOOLTIP="Disconnect wifi";
Blockly.MIXLY_ESP32_NETWORK_GET_WIFI_TOOLTIP="Return the connection name of wifi";
Blockly.MIXLY_ESP32_NETWORK_AP_CONNECT_TOOLTIP="Set the name of the access point";
Blockly.MIXLY_ESP32_NETWORK_SERVER_TOOLTIP="Turn off network connection";
Blockly.MIXLY_ESP32_NETWORK_SOCKET_INIT_TOOLTIP="Initialize network connection";
Blockly.MIXLY_ESP32_NETWORK_SOCKET_BIND_TOOLTIP="Bind a socket to a network address";
Blockly.MIXLY_ESP32_NETWORK_SOCKET_LISTEN_TOOLTIP="Listen for incoming connections";
Blockly.MIXLY_ESP32_NETWORK_SOCKET_ACCEPT_TOOLTIP="Accept the connection and return the connected object";
Blockly.MIXLY_ESP32_NETWORK_SOCKET_RECEIVE_TOOLTIP="Return received data";
Blockly.MIXLY_ESP32_NETWORK_SOCKET_SEND_TOOLTIP="send Message";
Blockly.MIXLY_ESP32_NETWORK_SOCKET_RECEIVE_FROM_TOOLTIP="Return received data";
Blockly.MIXLY_ESP32_NETWORK_SOCKET_SEND_TO_TOOLTIP="Send a message to the specified network address";
Blockly.MIXLY_ESP32_NETWORK_SOCKET_CLOSE_TOOLTIP="Turn off network connection";


//@author:zyc 2018-12-6
Blockly.MIXLY_TOOLTIP_RTC_SETTIME = Blockly.MIXLY_RTCSETTIME;
Blockly.MIXLY_TOOLTIP_RTC_SETDATE = Blockly.MIXLY_RTCSETDATE;
Blockly.MIXLY_TOOLTIP_RGB_INIT = Blockly.MIXLY_RGB_PIN_COUNT;
Blockly.MIXLY_TOOLTIP_RGB_DISPLAY = Blockly.MIXLY_RGB_NUM_R_G_B;
Blockly.MIXLY_ESP32_INOUT_HIGHLOW_TOOLTIP ='Return to a high or low level ';
Blockly.MIXLY_ESP32_INOUT_DIGITAL_INIT_TOOLTIP ='Initialize the output signal of a pin as a digital signal ';
Blockly.MIXLY_ESP32_INOUT_DIGITAL_WRITE_TOOLTIP ='Set the digital output value of a pin ';
Blockly.MIXLY_ESP32_INOUT_DIGITAL_READ_TOOLTIP ='Get the numeric input value of a pin ';
Blockly.MIXLY_PYTHON_CONTROLS_PASS_TOOLTIP ='Pass.';
Blockly.MIXLY_PYTHON_CONTROLS_RANGE_TOOLTIP ='Returns a list of steps from the beginning to the end with the third argument ';
Blockly.MIXLY_ESP32_SYSTEM_TIMER_TOOLTIP ='Initializes a timer whose interval is a value, whose mode is a single or multiple trigger, and whose callback function is a function ';
Blockly.MIXLY_ESP32_SYSTEM_TIMER_INIT_TOOLTIP ='Initialize a timer ';
Blockly.MIXLY_PYTHON_CONTROLS_FLOW_STATEMENTS_TOOLTIP ='Get out of the loop ';
Blockly.MIXLY_ESP32_CONTROLS_MILLIS_TOOLTIP ='Get system running time ';
Blockly.MIXLY_ESP32_SYSTEM_TICKS_DIFF_TOOLTIP ='Get the difference between two times ';
Blockly.MIXLY_MIXPY_INOUT_STR_INPUT_TOOLTIP='receive keyboard input, end with enter, content automatically converted to a string, prompt is provided to the users input prompt ';
Blockly.MIXLY_MIXPY_INOUT_INT_INPUT_TOOLTIP='receive keyboard input, end with enter, content automatically converted to an integer, prompt is provided to the users input prompt ';
Blockly.MIXLY_MIXPY_INOUT_FLOAT_INPUT_TOOLTIP='receive keyboard input, end with enter, content automatically converted to decimal, prompt is to provide users with input prompt ';
Blockly.MIXLY_MIXPY_CONTROL_END_TOOLTIP='terminate the program ';
Blockly.MIXLY_MIXPY_CONTROL_TRY_TOOLTIP ='Try to execute a statement and execute some commands based on whether the statement is true or false ';
Blockly.MIXLY_MIXPY_CONTROL_EXCEPT_TOOLTIP ='Statement to be executed if there is an error in the statement to be executed ';
Blockly.MIXLY_MIXPY_CONTROL_FINALLY_TOOLTIP ='A statement executed regardless of whether the statement being attempted has errors ';
Blockly.MIXLY_MIXPY_TEXT_TITLE_TOOLTIP ='Converts the first letter of each word in a string to uppercase';
Blockly.MIXLY_MIXPY_TEXT_CAPITALIZE_TOOLTIP = "Converts the first letter of each sentence in a string to uppercase";
Blockly.MIXLY_MIXPY_TEXT_SWAPCASE_TOOLTIP = "Converts all lowercase letters in a string to uppercase and all uppercase letters to lowercase";
Blockly.MIXLY_MIXPY_TEXT_LOWER_TOOLTIP ='Convert all characters in a string to lowercase ';
Blockly.MIXLY_MIXPY_TEXT_CENTER_TOOLTIP ='Set the alignment of a string and fill in all blanks with symbols ';
Blockly.MIXLY_MIXPY_TEXT_FIND_TOOLTIP ='Returns a number representing the first occurrence of a character in a string.';
Blockly.MIXLY_MIXPY_TEXT_REPLACE_TOOLTIP ='Replaces the specified contents of a string with the corresponding contents';
Blockly.MIXLY_MIXPY_TEXT_SPLIT_TOOLTIP ='Splits a string into multiple strings according to the specified character, and returns a list of these substrings ';
Blockly.MIXLY_MIXPY_TURTLE_TEXTINPUT ='turtle gets user input string ';
Blockly.MIXLY_MIXPY_TURTLE_TEXTINPUT_TITLE ='input box title is ';
Blockly.MIXLY_MIXPY_TURTLE_TEXTINPUT_PROMPT ='user prompt is ';
Blockly.Msg.TURTLE_TEXTINPUT_TOOLTIP ='A dialog box pops up to get the string input by the user. The two parameters are the title of the dialog box and the input prompt of the user ';
Blockly.MIXLY_MIXPY_TURTLE_NUMINPUT ='turtle gets user input floating-point number ';
Blockly.Msg.TURTLE_NUMINPUT_TOOLTIP ='Pop up a dialog box to get the floating point number input by the user. The parameters are dialog box title, user input prompt, user input default value, minimum value and maximum value respectively ';
Blockly.MIXLY_MIXPY_TURTLE_DRAW_CIRCLE='draw a circle ';
Blockly.MIXLY_MIXPY_TURTLE_SETXY='set the coordinates to ';
Blockly.MIXLY_MIXPY_TURTLE_SETXY_TOOLTIP='command turtle to move to the specified horizontal and vertical position ';
Blockly.LANG_MATH_FLOAT_RANDOM ='Decimals (left open, right closed)';
Blockly.MIXLY_MIXPY_TEXT_FORMAT_TOOLTIP ='replace the content at the specified position of the first string parameter with the corresponding parameter, and return the resulting string ';
Blockly.Msg.TEXT_RANDOM_CHAR='Random one character';
Blockly.Msg.TEXT_RANDOM_CHAR_TOOLTIP='Returns a random character in a string';
Blockly.LANG_LISTS_CLEAR_TOOLTIP ='remove all items from the list to make it an empty list. ';
Blockly.Msg.PYTHON_TUPLE_GET_SUBLIST_TOOLTIP ='Copies the specified part of a tuple. ';
Blockly.MIXLY_TOOLTIP_TUPLE_SUM ='returns the sum of all values in a tuple ';
Blockly.MIXLY_ESP32_IOT_WIFI_CONNECT_TOOLTIP = "connect to wifi with name and password of";
Blockly.MIXLY_ESP32_IOT_ONENET_CONNECT_TOOLTIP = "create some onenet connection";
Blockly.MIXLY_ESP32_IOT_ONENET_DISCONNECT_TOOLTIP = "disconnect an onenet connection";
Blockly.MIXLY_ESP32_IOT_ONENET_CHECK_TOOLTIP = "make an onenet connection receive and execute instructions";
Blockly.MIXLY_ESP32_IOT_ONENET_PUBLISH_DICT_TOOLTIP = "let an onenet connection send a dictionary ";
Blockly.MIXLY_ESP32_IOT_ONENET_PUBLISH_TOOLTIP = "let an onenet connection send a message ";
Blockly.MIXLY_MICROPYTHON_TYPE_COMPLEX = "complex number ";
Blockly.Msg.TEXT_LINES_TOOLTIP = "Multiline text";
Blockly.MIXLY_MIXPY_LISTS_REMOVE='Delete the specified item';
Blockly.MIXLY_MIXPY_INOUT_PRINT_EMPTY='cursor wrap ';
Blockly.MIXLY_MIXPY_INOUT_PRINT_MANY_ITEM_TOOLTIP='drag an item into or out of the right block to change the number of parameters printed';
Blockly.MIXLY_MIXPY_INOUT_PRINT_MANY_CONTAINER_TOOLTIP ='Add, remove, or rearrange sections to reconfigure the chunk' ;
Blockly.MIXLY_MIXPY_INOUT_PRINT_MANY_TOOLTIP='print multiple parameters, if the number of parameters is 0, move the cursor down one line';
Blockly.MIXLY_HANDBIT_DISLPAY_OLED_FILL = 'fill';
Blockly.MIXLY_HANDBIT_DISLPAY_OLED_CLEAR = 'clear';
Blockly.MIXLY_PYTHON_CONTROLS_THREAD_START = 'start thread';
Blockly.MIXLY_PYTHON_CONTROLS_THREAD_USE = 'calling function ';
Blockly.MIXLY_PYTHON_CONTROLS_THREAD_TOOLTIP = 'start a new thread to call a function with a given parameter (in a tuple) ';
Blockly.MIXLY_ESP32_SHOW_IMAGE_OR_STRING_OR_ANIMATION='show (image/string/animation)';
Blockly.MIXLY_MIXPY_TURTLE_WIDTH = 'pensize';
Blockly.MIXLY_TOOLTIP_TURTEL_HEADING =' get turtle current heading, return a float';
Blockly.MIXLY_TOOLTIP_TURTEL_WIDTH =' get the current pensize of the turtle and return an integer ';

Blockly.MIXLY_PYTHON_SYSTEM_EVAL = 'execute the text code and get its return value     code';
Blockly.MIXLY_PYTHON_SYSTEM_EVAL_TOOLTIP = 'returns the value of the execution of the parameter code, or None if the parameter code has no return';
Blockly.MIXLY_PYTHON_TEXT_JOIN_SEQ_USE_STR = 'use string';
Blockly.MIXLY_PYTHON_TEXT_JOIN_SEQ_SEQ = 'to make sequence';
Blockly.MIXLY_PYTHON_TEXT_JOIN_SEQ_GET_STR = 'joined as a string';
Blockly.MIXLY_PYTHON_TEXT_JOIN_SEQ_TOOLTIP = 'the second parameter must be iterable and each item type iterated is a string; The result returns a string';
Blockly.MIXLY_PYTHON_TURTLE_EXITONCLICK = 'set click the screen to end the turtle';
Blockly.MIXLY_ESP32_THRESHOLD="threshold";
Blockly.MIXLY_TOUCHATTACHINTERRUPT_PIN='Touch Interrupt Pin';
Blockly.MIXLY_ESP32_HW_TIMER='hardware Timer NO#';
Blockly.MIXLY_MICROPYTHON_SOCKET_CONNECT_TO_ADDRESS='connect to address';
Blockly.MIXLY_ESP32_NETWORK_SOCKET_CONNECT_TOOLTIP="connects a socket to a network address";
Blockly.MIXLY_NETWORK_WIFI_IS_ACTIVE ="get active state";
Blockly.MIXLY_NETWORK_WIFI_IS_ACTIVE_TOOLTIP ="get the active state of the specified network";

Blockly.MIXLY_PYTHON_LOGIC_IS = "is";
Blockly.MIXLY_ESP32_IOT_ONENET_PRINT_DATA="print data";
////////blynk////////////////////////////
Blockly.blynk_IOT_AUTH='Blynk Auth';
Blockly.blynk_WIFI_SSID='Wi-Fi SSID';
Blockly.blynk_WIFI_PASS='Wi-Fi Password';
Blockly.blynk_IOT_GET_DATA='Get data From App VPin';
Blockly.blynk_IOT_PUSH_DATA='Send data to App';
Blockly.blynk_IOT_DATA='Data';
Blockly.BLYNK_VIRTUALPIN='虚拟管脚';
Blockly.blynk_SERVER_INFO='Server Info';
Blockly.blynk_SERVER_ADD='Server Address';
Blockly.blynk_IOT_DATA_TYPE='Data type';
Blockly.blynk_IOT_INT='int';
Blockly.blynk_IOT_STRING='String';
Blockly.blynk_IOT_DOUBLE='float';
Blockly.blynk_IOT_VAR_NAME='variable name';

Blockly.blynk_TIMER='Blynk Timer';
Blockly.blynk_IOT_WidgetLED='LED Widget VPin';
Blockly.blynk_IOT_WidgetLED_ON='ON';
Blockly.blynk_IOT_WidgetLED_OFF='OFF';
Blockly.blynk_iot_WidgetLED_COLOR='Color';
Blockly.blynk_IOT_WidgetLED_VALUE='Brightness';
Blockly.blynk_IOT_IR_SEND='红外控制空调 品牌';
Blockly.blynk_IOT_ON='开';
Blockly.blynk_IOT_OFF='关';
Blockly.blynk_IOT_GREE='格力';
Blockly.blynk_IOT_MIDEA='美的';
Blockly.blynk_IOT_FAN='送风';
Blockly.blynk_IOT_HEAT= '制热';
Blockly.blynk_IOT_COOL='制冷';
Blockly.blynk_IOT_DRY='抽湿';
Blockly.blynk_IOT_AUTO='自动';
Blockly.blynk_IOT_FAN_3='高速';
Blockly.blynk_IOT_FAN_2='中速';
Blockly.blynk_IOT_FAN_1='低速'; 
Blockly.blynk_IOT_FAN_0='自动';
Blockly.blynk_IOT_IR_MODE='模式';
Blockly.blynk_IOT_IR_FAN='风速';
Blockly.blynk_IOT_IR_TEMP='温度';
Blockly.blynk_IOT_IR_POWER='电源';

Blockly.blynk_IOT_IR_RECEIVE_RAW='红外信号解码 管脚';
Blockly.blynk_IOT_IR_SEND='红外发送 管脚';
Blockly.blynk_IOT_IR_SEND_CODE='编码内容';


//OLED
Blockly.OLED = 'OLED';
Blockly.OLEDGET = 'Get OLED';
Blockly.OLED_CLEAR='OLED Clean screen';
Blockly.MIXLY_HEIGHT = 'Height';
Blockly.MIXLY_WIDTH = 'Width';
Blockly.OLED_DRAWPIXE = 'Draw Pixel';
Blockly.OLED_POSX = 'x';
Blockly.OLED_POSY = 'y';
Blockly.OLED_PAGE = 'Page';
Blockly.OLED_DRAWLINE = 'Draw Line';
Blockly.OLED_START_X = 'Start X';
Blockly.OLED_START_Y = 'Start Y';
Blockly.OLED_END_X = 'End x';
Blockly.OLED_END_Y = 'End y';
Blockly.OLED_HOR = 'Horizontal';
Blockly.OLED_VER = 'vertical';
Blockly.OLED_LENGTH = 'length';
Blockly.OLED_DRAW_TRIANGLE = 'Draw Triangle';
Blockly.OLED_D0_X = 'A x';
Blockly.OLED_D0_Y = 'A y';
Blockly.OLED_D1_X = 'B x';
Blockly.OLED_D1_Y = 'B y';
Blockly.OLED_D2_X = 'C x';
Blockly.OLED_D2_Y = 'C y';
Blockly.OLED_D3_X = 'D x';
Blockly.OLED_D3_Y = 'D y';
Blockly.OLED_DRAW_RECTANGLE = 'Draw Rectangle';
Blockly.OLED_L_U_X = 'Left Top x';
Blockly.OLED_L_U_Y = 'Left Top y';
Blockly.OLED_DRAWSTRLINE = 'Draw Straight Line';
Blockly.OLED_DRAW_RAD_RECTANGLE = 'Draw Rounded Rectangle';
Blockly.OLED_RADIUS = 'Corner Radius';
Blockly.OLED_CIRCLE_RADIUS = 'Radius';
Blockly.OLED_DRAW_CIRCLE = 'Draw Circle';
Blockly.OLED_CENTER_CIRCLE_X = 'Center of Circle X';
Blockly.OLED_CENTER_CIRCLE_Y = 'Center of Circle Y';
Blockly.OLED_ELLIPSE_RADIUS_X = 'x-axis Radius';
Blockly.OLED_ELLIPSE_RADIUS_Y = 'y-axis Radius';
Blockly.OLED_DRAW_ELLIPSE = 'Draw Ellipse';
Blockly.OLED_DRAWSTR = 'Show String';
Blockly.OLED_PRINT_VAR = 'Show Variables';
Blockly.OLED_STRING = 'String';
Blockly.OLED_SET_FONT = 'Set font';
Blockly.oled_draw4Str = 'Show 4 Lines';
Blockly.oled_page_tooltip='New OLED Page';
Blockly.oled_setFont_tooltip='set font';
Blockly.oled_print_tooltip='打印字符串变量值。';
Blockly.OLED_DRAW_ELLIPSE_TOOLTIP='绘制椭圆，x范围(0~127),y范围(0~63)';
Blockly.OLED_INIT='OLED Initialize';
Blockly.OLED_INIT2='OLED Initialize(I2C)';
Blockly.OLED_INIT2_TOOLTIP='接IIC接口,A4 (SDA), A5 (SCL)';
Blockly.OLED_SOLID='Solid';
Blockly.OLED_HOLLOW='Hollow';
Blockly.OLED_WHOLE_CICILE='Whole Cicle';
Blockly.OLED_UP_R='Up Right';
Blockly.OLED_UP_L='Up Left';
Blockly.OLED_LOW_R='Down Right';
Blockly.OLED_LOW_L='Down Left';
Blockly.OLED_normal='Normal';
Blockly.OLED_bold='Bold';
Blockly.BIG='Large';
Blockly.MIDDLE='Middle';
Blockly.SMALL='Small';
Blockly.OLED_DEGREE0='0 Degree';
Blockly.OLED_DEGREE90='90 Degree';
Blockly.OLED_DEGREE180='180 Degree';
Blockly.OLED_DEGREE270='270 Degree';
Blockly.OLED_BITMAP='Show Bitmap';
Blockly.OLED_BITMAP_NAME='字模名称';
Blockly.OLED_BITMAP_DATA='字模数据';
Blockly.OLED_GET_HEIGHT_TOOLTIP='获取OLED的宽度或高度';
Blockly.OLED_DEF_BMP_DATA_TOOLTIP='设置一个字模名称，将图像/汉字取模结果粘贴到字模数据中。';
Blockly.OLED_SHOW_BMP_TOOLTIP='设置需要显示图像/汉字的坐标和它的宽高，再设置字模名称。';
Blockly.OLED_DRAW_PIXE_TOOLTIP='设置坐标，在OLED上绘制点。';
Blockly.OLED_DRAW_LINE_TOOLTIP='设置直线的起点和终点坐标，画出一条直线。';
Blockly.OLED_FONT_wqy12_t_gb2312='文泉驿宋体12号';
Blockly.OLED_FONT_wqy14_t_gb2312='文泉驿宋体14号';
Blockly.OLED_FONT_wqy16_t_gb2312='文泉驿宋体16号';
Blockly.blynk_EMAIL='Email';
Blockly.blynk_EMAIL_ADD='Address';
Blockly.blynk_EMAIL_SUBJECT='Email Subject';
Blockly.blynk_EMAIL_CONTENT='Email Content';

Blockly.blynk_BRIDGE_AUTH='Bridge Auth';
Blockly.blynk_bridge_digitalWrite='Bridge DigitalWrite';
Blockly.blynk_bridge_AnaloglWrite='Bridge AnglogWrite';
Blockly.BLYNK_BRIDGE_VIRTUALPIN='Bridge Vpin';

Blockly.blynk_WidgetRTC_init='RTC Widget Init';
Blockly.blynk_WidgetRTC_setSyncInterval='setSyncInterval';
Blockly.blynk_WidgetRTC_mintues='minute';
Blockly.blynk_WidgetRTC_get_time='RTC Widget Get';

Blockly.blynk_iot_playmusic='Play Music Widget';


Blockly.GD5800_MP3='GD5800 MP3';
Blockly.MIXLY_MP3_PLAY='Play';

Blockly.MIXLY_MP3_PAUSE='Pause';
Blockly.MIXLY_MP3_NEXT='Next';
Blockly.MIXLY_MP3_PREV='Prev';
Blockly.MIXLY_MP3_VOL_UP='VOL UP';
Blockly.MIXLY_MP3_VOL_DOWN='VOL DOWN';

Blockly.MIXLY_MP3_LOOP_MODE='Loop Mode';
Blockly.MIXLY_MP3_LOOP_ALL='Loop All';
Blockly.MIXLY_MP3_LOOP_FOLDER='Loop Folder';
Blockly.MIXLY_MP3_LOOP_ONE='Single Cycle';
Blockly.MIXLY_MP3_LOOP_RAM='Random Play';


Blockly.MIXLY_MIXPY_TURTLE_WIDTH = 'pensize';
Blockly.MIXLY_TOOLTIP_TURTEL_HEADING =' get turtle current heading, return a float';
Blockly.MIXLY_TOOLTIP_TURTEL_WIDTH =' get the current pensize of the turtle and return an integer ';

Blockly.MIXLY_PYTHON_SYSTEM_EVAL = 'execute the text code and get its return value     code';
Blockly.MIXLY_PYTHON_SYSTEM_EVAL_TOOLTIP = 'returns the value of the execution of the parameter code, or None if the parameter code has no return';
Blockly.MIXLY_PYTHON_TEXT_JOIN_SEQ_USE_STR = 'use string';
Blockly.MIXLY_PYTHON_TEXT_JOIN_SEQ_SEQ = 'to make sequence';
Blockly.MIXLY_PYTHON_TEXT_JOIN_SEQ_GET_STR = 'joined as a string';
Blockly.MIXLY_PYTHON_TEXT_JOIN_SEQ_TOOLTIP = 'the second parameter must be iterable and each item type iterated is a string; The result returns a string';
Blockly.MIXLY_MP3_EQ_MODE='EQ';
Blockly.MIXLY_MP3_EQ_NORMAL='Normal';
Blockly.MIXLY_MP3_EQ_POP='popular';
Blockly.MIXLY_MP3_EQ_ROCK='rock';
Blockly.MIXLY_MP3_EQ_JAZZ='jazz';
Blockly.MIXLY_MP3_EQ_CLASSIC='classic';
Blockly.MIXLY_MP3_EQ_BASS='低音';
Blockly.MIXLY_MP3_VOL='音量';
Blockly.MIXLY_MP3_PLAY_NUM='播放第';
Blockly.blynk_NOTIFY_CONTENT='Content';
Blockly.blynk_NOTIFY='Send Notify';
Blockly.blynk_USB_SERVER_INFO='USB连接模式';
Blockly.IICSCAN='IIC设备地址查找';
Blockly.blynk_smartconfig='Smart Config';
Blockly.blynk_QR='Scan the QR code to get info';
Blockly.blynk_terminal='Terminal';
Blockly.blynk_IOT_terminal_get='Get String From Terminal';
Blockly.blynk_VIDEOURL='Video URL';
Blockly.blynk_LIGHT='Light Sensor';
Blockly.blynk_GRAVITY='Gravity Sensor';
Blockly.blynk_ACC='acceleration Sensor';
Blockly.blynk_ACC_tooltip='返回值范围-9~9。';
Blockly.blynk_time_input_1='时间输入组件(简单)';
Blockly.BLYNK_CONNECTED='Hardware Connected';
Blockly.BLYNK_APP_CONNECTED='APP Connected';
Blockly.BLYNK_APP_DISCONNECTED='APP Offline';
Blockly.BLYNK_syncAll='Sync All Pin';
Blockly.blynk_IOT_syncVirtual='Sync All virtual Pin';
Blockly.MIXLY_SPEED='Speed';
Blockly.MIXLY_MOTOR_SPEED = 'Speed`(-255~255)';
Blockly.MIXLY_MOTOR = 'Motor';
Blockly.MIXLY_MOTOR_SPEED_PIN='Speed PIN';
Blockly.MIXLY_MOTOR_DIR_PIN='Dir Pin';

Blockly.MIXLY_HARDWARE='硬件交互';
Blockly.MIXLY_HARDWARE_SERIAL='Serial';
Blockly.MIXLY_HARDWARE_START='啟動交互';
Blockly.MixGo_MPU9250='MPU9250 9-Axis';
Blockly.MixGo_MPU9250_AX='X-Accel';
Blockly.MixGo_MPU9250_AY='Y-Accel';
Blockly.MixGo_MPU9250_AZ='Z-Accel';
Blockly.MixGo_MPU9250_GX='x-Gyro';
Blockly.MixGo_MPU9250_GY='y-Gyro';
Blockly.MixGo_MPU9250_GZ='z-Gyro';
Blockly.MixGo_MPU9250_MX='x-Magnet';
Blockly.MixGo_MPU9250_MY='y-Magnet';
Blockly.MixGo_MPU9250_MZ='z-Magnet';

Blockly.MIXLY_HANBIT_SHOW_CIRCLE = " center of circle (x %1, y %2) radius %3 %4 filling %5";
Blockly.MIXLY_HANBIT_SHOW_triangle = " vertex (x0 %1, y0 %2) (x1 %3, y1 %4) (x2 %5, y2 %6) %7 filled %8";
Blockly.MIXLY_HANBIT_DRAW_TRIANGLE = "triangle";

Blockly.MICROBIT_SENSOR_LIGHT_TOOLTIP = 'The value of the light sensor（0~255）'


/* 掌控板_物联网 */
Blockly.MPYTHON_BLYNK_TERMINAL_WIDGET_VPIN_HELPURL = '';
Blockly.MPYTHON_BLYNK_TERMINAL_WIDGET_VPIN_MESSAGE0 = "custom terminal widget on virtual pin V %1";
Blockly.MPYTHON_BLYNK_TERMINAL_WIDGET_VPIN_TOOLTIP = '';

Blockly.MPYTHON_BLYNK_SYNC_VIRTUAL_HELPURL = '';
Blockly.MPYTHON_BLYNK_SYNC_VIRTUAL_MESSAGE0 = "synchronizing the status of virtual pin V %1";
Blockly.MPYTHON_BLYNK_SYNC_VIRTUAL_TOOLTIP = '';

Blockly.MPYTHON_BLYNK_ON_DISCONNECTED_HELPURL = '';
Blockly.MPYTHON_BLYNK_ON_DISCONNECTED_MESSAGE0 = "when Blynk disconnected";
Blockly.MPYTHON_BLYNK_ON_DISCONNECTED_TOOLTIP = '';

Blockly.MPYTHON_BLYNK_ON_CONNECTED_HELPURL = '';
Blockly.MPYTHON_BLYNK_ON_CONNECTED_MESSAGE0 = "when Blynk connected";
Blockly.MPYTHON_BLYNK_ON_CONNECTED_TOOLTIP = '';

Blockly.MPYTHON_BLYNKTIMER_RUN_HELPURL = '';
Blockly.MPYTHON_BLYNKTIMER_RUN_MESSAGE0 = "run the BlynkTimer processes";
Blockly.MPYTHON_BLYNKTIMER_RUN_TOOLTIP = 'It is recommended to put this block in \'repeat forever\' block';

Blockly.MPYTHON_BLYNK_RUN_HELPURL = '';
Blockly.MPYTHON_BLYNK_RUN_MESSAGE0 = "run the Blynk processes";
Blockly.MPYTHON_BLYNK_RUN_TOOLTIP = 'It is recommended to put this block in \'repeat forever\' block';

Blockly.MPYTHON_BLYNK_APP_NOTIFY_HELPURL = '';
Blockly.MPYTHON_BLYNK_APP_NOTIFY_MESSAGE0 = "Blynk APP notifies %1";
Blockly.MPYTHON_BLYNK_APP_NOTIFY_TOOLTIP = '';

Blockly.MPYTHON_BLYNKTIMER_HELPURL = '';
Blockly.MPYTHON_BLYNKTIMER_MESSAGE0 = "BlynkTimer number %1 mode %2 period %3 seconds";
Blockly.MPYTHON_BLYNKTIMER_TOOLTIP = 'Note:\nthe serial number of the timer is automatically obtained, from top to bottom, starting from 0 and continuous, don`t do this"timer 0, timer 2", the exposed serial number parameter is convenient to view here!\nParameter:\nno_timers_err=False - disable exception raise if all all timers were stopped';

Blockly.MPYTHON_BLYNK_STOP_TIMERS_HELPURL = '';
Blockly.MPYTHON_BLYNK_STOP_TIMERS_MESSAGE0 = 'stop Blynk timer %1';
Blockly.MPYTHON_BLYNK_STOP_TIMERS_TOOLTIP =
    'Note:\nthe serial number of the timer is automatically obtained, from top to bottom, starting from 0 and continuous, don`t do this"timer 0, timer 2", the exposed serial number parameter is convenient to view here!\nParameter:\nno_timers_err=False - disable exception raise if all all timers were stopped';


Blockly.MPYTHON_BLYNK_SET_PROPERTY_HELPURL = '';
Blockly.MPYTHON_BLYNK_SET_PROPERTY_MESSAGE0 = 'set property %1 and value %2 to virtual pin';
Blockly.MPYTHON_BLYNK_SET_PROPERTY_TOOLTIP = "Placed in a read or write event, the virtual pin is determined by the event,the component bound to the pin will have the added property";


Blockly.MPYTHON_BLYNK_EMAIL_HELPURL = '';
Blockly.MPYTHON_BLYNK_EMAIL_MESSAGE0 = 'email to %1 with subject %2 body %3';
Blockly.MPYTHON_BLYNK_EMAIL_TOOLTIP = "";

Blockly.MPYTHON_BLYNK_GET_TIMERS_HELPURL = '';
Blockly.MPYTHON_BLYNK_GET_TIMERS_MESSAGE0 = 'available Blynk timers';
Blockly.MPYTHON_BLYNK_GET_TIMERS_TOOLTIP = "";

Blockly.MPYTHON_BLYNK_SENSOR_DATA_TO_APP_HELPURL = '';
Blockly.MPYTHON_BLYNK_SENSOR_DATA_TO_APP_MESSAGE0 = "send data %1 to Blynk APP's virtual pin V %2";
Blockly.MPYTHON_BLYNK_SENSOR_DATA_TO_APP_TOOLTIP = 'virtual pin: V0 ~ V255';

Blockly.MPYTHON_BLYNK_APP_DATA_HELPURL = '';
Blockly.MPYTHON_BLYNK_APP_DATA_MESSAGE0 = 'when received value %2 of virtual pin V %1 from Blynk APP';
Blockly.MPYTHON_BLYNK_APP_DATA_TOOLTIP = 'Virtual pin: V0 ~ V255';

Blockly.MPYTHON_BLYNK_SETUP_HELPURL = '';
Blockly.MPYTHON_BLYNK_SETUP_MESSAGE0 = 'Blynk Settings %1 server %2 port %3 authorization code %4';
Blockly.MPYTHON_BLYNK_SETUP_TOOLTIP = 'The default server is blynk-cloud.com and the default port is 80';


Blockly.MIXLY_readTempC='Get Centigrade';
Blockly.MIXLY_readTempF='Get Fahrenheit';
Blockly.MIXLY_MPU6050='MPU6050 Gyroscope';
Blockly.MIXLY_MPU6050_update='MPU6050 Gyroscope refresh data';
Blockly.MIXLY_Accel_X ='X-Accel';
Blockly.MIXLY_Accel_Y ='Y-Accel';
Blockly.MIXLY_Accel_Z ='Z-Accel';
Blockly.MIXLY_Gyro_X ='X-Gyro';
Blockly.MIXLY_Gyro_Y ='Y-Gyro';
Blockly.MIXLY_Gyro_Z ='Z-Gyro';

